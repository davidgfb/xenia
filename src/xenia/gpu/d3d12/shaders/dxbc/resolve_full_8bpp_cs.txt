//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeResolveConstants
// {
//
//   uint xe_resolve_edram_info;        // Offset:    0 Size:     4
//   uint xe_resolve_address_info;      // Offset:    4 Size:     4
//   uint xe_resolve_dest_info;         // Offset:    8 Size:     4
//   uint xe_resolve_dest_pitch_aligned;// Offset:   12 Size:     4
//   uint xe_resolve_dest_base;         // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_resolve_source                 texture    byte         r/o      T0             t0      1 
// xe_resolve_dest                       UAV   uint2         buf      U0             u0      1 
// XeResolveConstants                cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][2], immediateIndexed, space=0
dcl_resource_raw T0[0:0], space=0
dcl_uav_typed_buffer (uint,uint,uint,uint) U0[0:0], space=0
dcl_input vThreadID.xy
dcl_temps 16
dcl_thread_group 8, 8, 1
ubfe r0.x, l(11), l(7), CB0[0][0].y
uge r0.x, vThreadID.x, r0.x
if_nz r0.x
  ret 
endif 
ishl r0.xw, vThreadID.xxxx, l(3, 0, 0, 3)
ushr r1.xy, CB0[0][0].yyyy, l(5, 29, 0, 0)
mov r1.z, CB0[0][0].y
bfi r2.xy, l(5, 2, 0, 0), l(3, 3, 0, 0), r1.zxzz, l(0, 0, 0, 0)
mov r0.yz, vThreadID.yyyy
iadd r2.xy, r0.wzww, r2.xyxx
and r3.xyz, CB0[0][0].xzzx, l(1023, 0x01000000, 8, 0)
ubfe r4.xyzw, l(12, 2, 1, 4), l(13, 10, 29, 25), CB0[0][0].xxxx
uge r1.w, l(3), r1.y
if_nz r1.w
  mov r5.y, r1.y
else 
  ieq r1.w, r1.y, l(5)
  if_nz r1.w
    mov r5.y, l(2)
  else 
    mov r5.y, l(0)
  endif 
endif 
uge r2.zw, r4.yyyy, l(0, 0, 2, 1)
and r2.zw, r2.zzzw, l(0, 0, 1, 1)
ishl r2.xy, r2.xyxx, r2.zwzz
ushr r5.x, r5.y, l(1)
and r5.xy, r5.xyxx, l(1, 1, 0, 0)
iadd r2.xy, r2.xyxx, r5.xyxx
udiv r5.xy, null, r2.xyxx, l(80, 16, 0, 0)
movc r1.w, r4.z, l(1), l(0)
ishl r2.w, r5.x, r1.w
imad r2.w, r5.y, r3.x, r2.w
iadd r2.w, r2.w, r4.x
imad r2.xy, -r5.xyxx, l(80, 16, 0, 0), r2.xyxx
imad r2.x, r2.y, l(80), r2.x
ishl r1.w, r2.x, r1.w
imad r1.w, r2.w, l(1280), r1.w
iadd r2.x, r2.z, r4.z
ishl r2.y, l(4), r2.x
ishl r1.w, r1.w, l(2)
ine r2.z, r3.y, l(0)
ine r2.w, r4.z, l(0)
and r2.z, r2.z, r2.w
if_nz r2.z
  iadd r1.w, r1.w, l(4)
endif 
ieq r2.z, r2.y, l(4)
if_nz r2.z
  ld_raw r5.xyzw, r1.w, T0[0].xyzw
  iadd r2.w, r1.w, l(16)
  ld_raw r6.xyzw, r2.w, T0[0].xyzw
else 
  ld_raw r5.x, r1.w, T0[0].xxxx
  iadd r2.w, r2.y, r1.w
  ld_raw r5.y, r2.w, T0[0].xxxx
  ishl r7.xyzw, l(8, 12, 16, 20), r2.xxxx
  iadd r7.xyzw, r1.wwww, r7.xyzw
  ld_raw r5.z, r7.x, T0[0].xxxx
  ld_raw r5.w, r7.y, T0[0].xxxx
  ld_raw r6.x, r7.z, T0[0].xxxx
  ld_raw r6.y, r7.w, T0[0].xxxx
  ishl r3.xw, l(24, 0, 0, 28), r2.xxxx
  iadd r3.xw, r1.wwww, r3.xxxw
  ld_raw r6.z, r3.x, T0[0].xxxx
  ld_raw r6.w, r3.w, T0[0].xxxx
endif 
if_nz r4.z
  switch r4.w
    case l(5)
    ibfe r7.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r5.xyzw
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r5.xyzw, r7.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    ibfe r7.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r6.xyzw
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    f16tof32 r5.xyzw, r5.xyzw
    f16tof32 r6.xyzw, r6.xyzw
    break 
    default 
    break 
  endswitch 
else 
  switch r4.w
    case l(0)
    case l(1)
    movc r2.w, r3.y, l(16), l(0)
    ushr r7.xyzw, r5.xyzw, r2.wwww
    and r7.xyzw, r7.xyzw, l(255, 255, 255, 255)
    utof r7.xyzw, r7.xyzw
    mul r5.xyzw, r7.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
    ushr r7.xyzw, r6.xyzw, r2.wwww
    and r7.xyzw, r7.xyzw, l(255, 255, 255, 255)
    utof r7.xyzw, r7.xyzw
    mul r6.xyzw, r7.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
    break 
    case l(2)
    case l(10)
    movc r2.w, r3.y, l(20), l(0)
    ushr r7.xyzw, r5.xyzw, r2.wwww
    and r7.xyzw, r7.xyzw, l(1023, 1023, 1023, 1023)
    utof r7.xyzw, r7.xyzw
    mul r5.xyzw, r7.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
    ushr r7.xyzw, r6.xyzw, r2.wwww
    and r7.xyzw, r7.xyzw, l(1023, 1023, 1023, 1023)
    utof r7.xyzw, r7.xyzw
    mul r6.xyzw, r7.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
    break 
    case l(3)
    case l(12)
    movc r2.w, r3.y, l(20), l(0)
    ushr r7.xyzw, r5.xyzw, r2.wwww
    and r8.xyzw, r7.xyzw, l(1023, 1023, 1023, 1023)
    and r9.xyzw, r7.xyzw, l(127, 127, 127, 127)
    ubfe r10.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r7.xyzw
    firstbit_hi r11.xyzw, r9.xyzw
    iadd r11.xyzw, r11.xyzw, l(-24, -24, -24, -24)
    movc r11.xyzw, r9.xyzw, r11.xyzw, l(8,8,8,8)
    iadd r12.xyzw, -r11.xyzw, l(1, 1, 1, 1)
    movc r12.xyzw, r10.xyzw, r10.xyzw, r12.xyzw
    bfi r7.xyzw, l(7, 7, 7, 7), r11.xyzw, r7.xyzw, l(0, 0, 0, 0)
    and r7.xyzw, r7.xyzw, l(127, 127, 127, 127)
    movc r7.xyzw, r10.xyzw, r9.xyzw, r7.xyzw
    ishl r9.xyzw, r12.xyzw, l(23, 23, 23, 23)
    iadd r9.xyzw, r9.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
    ishl r7.xyzw, r7.xyzw, l(16, 16, 16, 16)
    iadd r7.xyzw, r9.xyzw, r7.xyzw
    movc r5.xyzw, r8.xyzw, r7.xyzw, l(0,0,0,0)
    ushr r7.xyzw, r6.xyzw, r2.wwww
    and r8.xyzw, r7.xyzw, l(1023, 1023, 1023, 1023)
    and r9.xyzw, r7.xyzw, l(127, 127, 127, 127)
    ubfe r10.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r7.xyzw
    firstbit_hi r11.xyzw, r9.xyzw
    iadd r11.xyzw, r11.xyzw, l(-24, -24, -24, -24)
    movc r11.xyzw, r9.xyzw, r11.xyzw, l(8,8,8,8)
    iadd r12.xyzw, -r11.xyzw, l(1, 1, 1, 1)
    movc r12.xyzw, r10.xyzw, r10.xyzw, r12.xyzw
    bfi r7.xyzw, l(7, 7, 7, 7), r11.xyzw, r7.xyzw, l(0, 0, 0, 0)
    and r7.xyzw, r7.xyzw, l(127, 127, 127, 127)
    movc r7.xyzw, r10.xyzw, r9.xyzw, r7.xyzw
    ishl r9.xyzw, r12.xyzw, l(23, 23, 23, 23)
    iadd r9.xyzw, r9.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
    ishl r7.xyzw, r7.xyzw, l(16, 16, 16, 16)
    iadd r7.xyzw, r9.xyzw, r7.xyzw
    movc r6.xyzw, r8.xyzw, r7.xyzw, l(0,0,0,0)
    break 
    case l(4)
    ibfe r7.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r5.xyzw
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r5.xyzw, r7.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    ibfe r7.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r6.xyzw
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(6)
    f16tof32 r5.xyzw, r5.xyzw
    f16tof32 r6.xyzw, r6.xyzw
    break 
    default 
    break 
  endswitch 
endif 
ibfe r2.w, l(6), l(16), CB0[0][0].z
ishl r2.w, r2.w, l(23)
iadd r2.w, r2.w, l(0x3f800000)
uge r3.x, r1.y, l(4)
if_nz r3.x
  mul r3.x, r2.w, l(0.500000)
  ishl r3.w, l(320), r4.z
  iadd r3.w, r1.w, r3.w
  if_nz r2.z
    ld_raw r7.xyzw, r3.w, T0[0].xyzw
    iadd r4.x, r3.w, l(16)
    ld_raw r8.xyzw, r4.x, T0[0].xyzw
  else 
    ld_raw r7.x, r3.w, T0[0].xxxx
    iadd r4.x, r2.y, r3.w
    ld_raw r7.y, r4.x, T0[0].xxxx
    ishl r9.xyzw, l(8, 12, 16, 20), r2.xxxx
    iadd r9.xyzw, r3.wwww, r9.xyzw
    ld_raw r7.z, r9.x, T0[0].xxxx
    ld_raw r7.w, r9.y, T0[0].xxxx
    ld_raw r8.x, r9.z, T0[0].xxxx
    ld_raw r8.y, r9.w, T0[0].xxxx
    ishl r4.xy, l(24, 28, 0, 0), r2.xxxx
    iadd r4.xy, r3.wwww, r4.xyxx
    ld_raw r8.z, r4.x, T0[0].xxxx
    ld_raw r8.w, r4.y, T0[0].xxxx
  endif 
  if_nz r4.z
    switch r4.w
      case l(5)
      ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r7.xyzw
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r8.xyzw
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      f16tof32 r7.xyzw, r7.xyzw
      f16tof32 r8.xyzw, r8.xyzw
      break 
      default 
      break 
    endswitch 
  else 
    switch r4.w
      case l(0)
      case l(1)
      movc r3.w, r3.y, l(16), l(0)
      ushr r9.xyzw, r7.xyzw, r3.wwww
      and r9.xyzw, r9.xyzw, l(255, 255, 255, 255)
      utof r9.xyzw, r9.xyzw
      mul r7.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
      ushr r9.xyzw, r8.xyzw, r3.wwww
      and r9.xyzw, r9.xyzw, l(255, 255, 255, 255)
      utof r9.xyzw, r9.xyzw
      mul r8.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
      break 
      case l(2)
      case l(10)
      movc r3.w, r3.y, l(20), l(0)
      ushr r9.xyzw, r7.xyzw, r3.wwww
      and r9.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
      utof r9.xyzw, r9.xyzw
      mul r7.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
      ushr r9.xyzw, r8.xyzw, r3.wwww
      and r9.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
      utof r9.xyzw, r9.xyzw
      mul r8.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
      break 
      case l(3)
      case l(12)
      movc r3.w, r3.y, l(20), l(0)
      ushr r9.xyzw, r7.xyzw, r3.wwww
      and r10.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
      and r11.xyzw, r9.xyzw, l(127, 127, 127, 127)
      ubfe r12.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r9.xyzw
      firstbit_hi r13.xyzw, r11.xyzw
      iadd r13.xyzw, r13.xyzw, l(-24, -24, -24, -24)
      movc r13.xyzw, r11.xyzw, r13.xyzw, l(8,8,8,8)
      iadd r14.xyzw, -r13.xyzw, l(1, 1, 1, 1)
      movc r14.xyzw, r12.xyzw, r12.xyzw, r14.xyzw
      bfi r9.xyzw, l(7, 7, 7, 7), r13.xyzw, r9.xyzw, l(0, 0, 0, 0)
      and r9.xyzw, r9.xyzw, l(127, 127, 127, 127)
      movc r9.xyzw, r12.xyzw, r11.xyzw, r9.xyzw
      ishl r11.xyzw, r14.xyzw, l(23, 23, 23, 23)
      iadd r11.xyzw, r11.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
      ishl r9.xyzw, r9.xyzw, l(16, 16, 16, 16)
      iadd r9.xyzw, r11.xyzw, r9.xyzw
      movc r7.xyzw, r10.xyzw, r9.xyzw, l(0,0,0,0)
      ushr r9.xyzw, r8.xyzw, r3.wwww
      and r10.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
      and r11.xyzw, r9.xyzw, l(127, 127, 127, 127)
      ubfe r12.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r9.xyzw
      firstbit_hi r13.xyzw, r11.xyzw
      iadd r13.xyzw, r13.xyzw, l(-24, -24, -24, -24)
      movc r13.xyzw, r11.xyzw, r13.xyzw, l(8,8,8,8)
      iadd r14.xyzw, -r13.xyzw, l(1, 1, 1, 1)
      movc r14.xyzw, r12.xyzw, r12.xyzw, r14.xyzw
      bfi r9.xyzw, l(7, 7, 7, 7), r13.xyzw, r9.xyzw, l(0, 0, 0, 0)
      and r9.xyzw, r9.xyzw, l(127, 127, 127, 127)
      movc r9.xyzw, r12.xyzw, r11.xyzw, r9.xyzw
      ishl r11.xyzw, r14.xyzw, l(23, 23, 23, 23)
      iadd r11.xyzw, r11.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
      ishl r9.xyzw, r9.xyzw, l(16, 16, 16, 16)
      iadd r9.xyzw, r11.xyzw, r9.xyzw
      movc r8.xyzw, r10.xyzw, r9.xyzw, l(0,0,0,0)
      break 
      case l(4)
      ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r7.xyzw
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r8.xyzw
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(6)
      f16tof32 r7.xyzw, r7.xyzw
      f16tof32 r8.xyzw, r8.xyzw
      break 
      default 
      break 
    endswitch 
  endif 
  add r5.xyzw, r5.xyzw, r7.xyzw
  add r6.xyzw, r6.xyzw, r8.xyzw
  uge r1.y, r1.y, l(6)
  if_nz r1.y
    mul r2.w, r2.w, l(0.250000)
    ishl r4.xy, l(4, 324, 0, 0), r4.zzzz
    iadd r1.yw, r1.wwww, r4.xxxy
    if_nz r2.z
      ld_raw r7.xyzw, r1.y, T0[0].xyzw
      iadd r3.w, r1.y, l(16)
      ld_raw r8.xyzw, r3.w, T0[0].xyzw
    else 
      ld_raw r7.x, r1.y, T0[0].xxxx
      iadd r3.w, r2.y, r1.y
      ld_raw r7.y, r3.w, T0[0].xxxx
      ishl r9.xyzw, l(8, 12, 16, 20), r2.xxxx
      iadd r9.xyzw, r1.yyyy, r9.xyzw
      ld_raw r7.z, r9.x, T0[0].xxxx
      ld_raw r7.w, r9.y, T0[0].xxxx
      ld_raw r8.x, r9.z, T0[0].xxxx
      ld_raw r8.y, r9.w, T0[0].xxxx
      ishl r4.xy, l(24, 28, 0, 0), r2.xxxx
      iadd r4.xy, r1.yyyy, r4.xyxx
      ld_raw r8.z, r4.x, T0[0].xxxx
      ld_raw r8.w, r4.y, T0[0].xxxx
    endif 
    if_nz r4.z
      switch r4.w
        case l(5)
        ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r7.xyzw
        itof r9.xyzw, r9.xyzw
        mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r7.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r8.xyzw
        itof r9.xyzw, r9.xyzw
        mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r8.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(7)
        f16tof32 r7.xyzw, r7.xyzw
        f16tof32 r8.xyzw, r8.xyzw
        break 
        default 
        break 
      endswitch 
    else 
      switch r4.w
        case l(0)
        case l(1)
        movc r1.y, r3.y, l(16), l(0)
        ushr r9.xyzw, r7.xyzw, r1.yyyy
        and r9.xyzw, r9.xyzw, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r7.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r9.xyzw, r8.xyzw, r1.yyyy
        and r9.xyzw, r9.xyzw, l(255, 255, 255, 255)
        utof r9.xyzw, r9.xyzw
        mul r8.xyzw, r9.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        break 
        case l(2)
        case l(10)
        movc r1.y, r3.y, l(20), l(0)
        ushr r9.xyzw, r7.xyzw, r1.yyyy
        and r9.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
        utof r9.xyzw, r9.xyzw
        mul r7.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
        ushr r9.xyzw, r8.xyzw, r1.yyyy
        and r9.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
        utof r9.xyzw, r9.xyzw
        mul r8.xyzw, r9.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
        break 
        case l(3)
        case l(12)
        movc r1.y, r3.y, l(20), l(0)
        ushr r9.xyzw, r7.xyzw, r1.yyyy
        and r10.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
        and r11.xyzw, r9.xyzw, l(127, 127, 127, 127)
        ubfe r12.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r9.xyzw
        firstbit_hi r13.xyzw, r11.xyzw
        iadd r13.xyzw, r13.xyzw, l(-24, -24, -24, -24)
        movc r13.xyzw, r11.xyzw, r13.xyzw, l(8,8,8,8)
        iadd r14.xyzw, -r13.xyzw, l(1, 1, 1, 1)
        movc r14.xyzw, r12.xyzw, r12.xyzw, r14.xyzw
        bfi r9.xyzw, l(7, 7, 7, 7), r13.xyzw, r9.xyzw, l(0, 0, 0, 0)
        and r9.xyzw, r9.xyzw, l(127, 127, 127, 127)
        movc r9.xyzw, r12.xyzw, r11.xyzw, r9.xyzw
        ishl r11.xyzw, r14.xyzw, l(23, 23, 23, 23)
        iadd r11.xyzw, r11.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
        ishl r9.xyzw, r9.xyzw, l(16, 16, 16, 16)
        iadd r9.xyzw, r11.xyzw, r9.xyzw
        movc r7.xyzw, r10.xyzw, r9.xyzw, l(0,0,0,0)
        ushr r9.xyzw, r8.xyzw, r1.yyyy
        and r10.xyzw, r9.xyzw, l(1023, 1023, 1023, 1023)
        and r11.xyzw, r9.xyzw, l(127, 127, 127, 127)
        ubfe r12.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r9.xyzw
        firstbit_hi r13.xyzw, r11.xyzw
        iadd r13.xyzw, r13.xyzw, l(-24, -24, -24, -24)
        movc r13.xyzw, r11.xyzw, r13.xyzw, l(8,8,8,8)
        iadd r14.xyzw, -r13.xyzw, l(1, 1, 1, 1)
        movc r14.xyzw, r12.xyzw, r12.xyzw, r14.xyzw
        bfi r9.xyzw, l(7, 7, 7, 7), r13.xyzw, r9.xyzw, l(0, 0, 0, 0)
        and r9.xyzw, r9.xyzw, l(127, 127, 127, 127)
        movc r9.xyzw, r12.xyzw, r11.xyzw, r9.xyzw
        ishl r11.xyzw, r14.xyzw, l(23, 23, 23, 23)
        iadd r11.xyzw, r11.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
        ishl r9.xyzw, r9.xyzw, l(16, 16, 16, 16)
        iadd r9.xyzw, r11.xyzw, r9.xyzw
        movc r8.xyzw, r10.xyzw, r9.xyzw, l(0,0,0,0)
        break 
        case l(4)
        ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r7.xyzw
        itof r9.xyzw, r9.xyzw
        mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r7.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ibfe r9.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r8.xyzw
        itof r9.xyzw, r9.xyzw
        mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r8.xyzw, r9.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(6)
        f16tof32 r7.xyzw, r7.xyzw
        f16tof32 r8.xyzw, r8.xyzw
        break 
        default 
        break 
      endswitch 
    endif 
    add r7.xyzw, r5.xyzw, r7.xyzw
    add r8.xyzw, r6.xyzw, r8.xyzw
    if_nz r2.z
      ld_raw r9.xyzw, r1.w, T0[0].xyzw
      iadd r1.y, r1.w, l(16)
      ld_raw r10.xyzw, r1.y, T0[0].xyzw
    else 
      ld_raw r9.x, r1.w, T0[0].xxxx
      iadd r1.y, r2.y, r1.w
      ld_raw r9.y, r1.y, T0[0].xxxx
      ishl r11.xyzw, l(8, 12, 16, 20), r2.xxxx
      iadd r11.xyzw, r1.wwww, r11.xyzw
      ld_raw r9.z, r11.x, T0[0].xxxx
      ld_raw r9.w, r11.y, T0[0].xxxx
      ld_raw r10.x, r11.z, T0[0].xxxx
      ld_raw r10.y, r11.w, T0[0].xxxx
      ishl r2.xy, l(24, 28, 0, 0), r2.xxxx
      iadd r1.yw, r1.wwww, r2.xxxy
      ld_raw r10.z, r1.y, T0[0].xxxx
      ld_raw r10.w, r1.w, T0[0].xxxx
    endif 
    if_nz r4.z
      switch r4.w
        case l(5)
        ibfe r11.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r9.xyzw
        itof r11.xyzw, r11.xyzw
        mul r11.xyzw, r11.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r9.xyzw, r11.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ibfe r11.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r10.xyzw
        itof r11.xyzw, r11.xyzw
        mul r11.xyzw, r11.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r10.xyzw, r11.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(7)
        f16tof32 r9.xyzw, r9.xyzw
        f16tof32 r10.xyzw, r10.xyzw
        break 
        default 
        break 
      endswitch 
    else 
      switch r4.w
        case l(0)
        case l(1)
        movc r1.y, r3.y, l(16), l(0)
        ushr r4.xyzw, r9.xyzw, r1.yyyy
        and r4.xyzw, r4.xyzw, l(255, 255, 255, 255)
        utof r4.xyzw, r4.xyzw
        mul r9.xyzw, r4.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        ushr r4.xyzw, r10.xyzw, r1.yyyy
        and r4.xyzw, r4.xyzw, l(255, 255, 255, 255)
        utof r4.xyzw, r4.xyzw
        mul r10.xyzw, r4.xyzw, l(0.003922, 0.003922, 0.003922, 0.003922)
        break 
        case l(2)
        case l(10)
        movc r1.y, r3.y, l(20), l(0)
        ushr r4.xyzw, r9.xyzw, r1.yyyy
        and r4.xyzw, r4.xyzw, l(1023, 1023, 1023, 1023)
        utof r4.xyzw, r4.xyzw
        mul r9.xyzw, r4.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
        ushr r4.xyzw, r10.xyzw, r1.yyyy
        and r4.xyzw, r4.xyzw, l(1023, 1023, 1023, 1023)
        utof r4.xyzw, r4.xyzw
        mul r10.xyzw, r4.xyzw, l(0.000978, 0.000978, 0.000978, 0.000978)
        break 
        case l(3)
        case l(12)
        movc r1.y, r3.y, l(20), l(0)
        ushr r4.xyzw, r9.xyzw, r1.yyyy
        and r11.xyzw, r4.xyzw, l(1023, 1023, 1023, 1023)
        and r12.xyzw, r4.xyzw, l(127, 127, 127, 127)
        ubfe r13.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r4.xyzw
        firstbit_hi r14.xyzw, r12.xyzw
        iadd r14.xyzw, r14.xyzw, l(-24, -24, -24, -24)
        movc r14.xyzw, r12.xyzw, r14.xyzw, l(8,8,8,8)
        iadd r15.xyzw, -r14.xyzw, l(1, 1, 1, 1)
        movc r15.xyzw, r13.xyzw, r13.xyzw, r15.xyzw
        bfi r4.xyzw, l(7, 7, 7, 7), r14.xyzw, r4.xyzw, l(0, 0, 0, 0)
        and r4.xyzw, r4.xyzw, l(127, 127, 127, 127)
        movc r4.xyzw, r13.xyzw, r12.xyzw, r4.xyzw
        ishl r12.xyzw, r15.xyzw, l(23, 23, 23, 23)
        iadd r12.xyzw, r12.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
        ishl r4.xyzw, r4.xyzw, l(16, 16, 16, 16)
        iadd r4.xyzw, r12.xyzw, r4.xyzw
        movc r9.xyzw, r11.xyzw, r4.xyzw, l(0,0,0,0)
        ushr r4.xyzw, r10.xyzw, r1.yyyy
        and r11.xyzw, r4.xyzw, l(1023, 1023, 1023, 1023)
        and r12.xyzw, r4.xyzw, l(127, 127, 127, 127)
        ubfe r13.xyzw, l(3, 3, 3, 3), l(7, 7, 7, 7), r4.xyzw
        firstbit_hi r14.xyzw, r12.xyzw
        iadd r14.xyzw, r14.xyzw, l(-24, -24, -24, -24)
        movc r14.xyzw, r12.xyzw, r14.xyzw, l(8,8,8,8)
        iadd r15.xyzw, -r14.xyzw, l(1, 1, 1, 1)
        movc r15.xyzw, r13.xyzw, r13.xyzw, r15.xyzw
        bfi r4.xyzw, l(7, 7, 7, 7), r14.xyzw, r4.xyzw, l(0, 0, 0, 0)
        and r4.xyzw, r4.xyzw, l(127, 127, 127, 127)
        movc r4.xyzw, r13.xyzw, r12.xyzw, r4.xyzw
        ishl r12.xyzw, r15.xyzw, l(23, 23, 23, 23)
        iadd r12.xyzw, r12.xyzw, l(0x3e000000, 0x3e000000, 0x3e000000, 0x3e000000)
        ishl r4.xyzw, r4.xyzw, l(16, 16, 16, 16)
        iadd r4.xyzw, r12.xyzw, r4.xyzw
        movc r10.xyzw, r11.xyzw, r4.xyzw, l(0,0,0,0)
        break 
        case l(4)
        ibfe r4.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r9.xyzw
        itof r4.xyzw, r4.xyzw
        mul r4.xyzw, r4.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r9.xyzw, r4.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        ibfe r4.xyzw, l(16, 16, 16, 16), l(0, 0, 0, 0), r10.xyzw
        itof r4.xyzw, r4.xyzw
        mul r4.xyzw, r4.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
        max r10.xyzw, r4.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
        break 
        case l(6)
        f16tof32 r9.xyzw, r9.xyzw
        f16tof32 r10.xyzw, r10.xyzw
        break 
        default 
        break 
      endswitch 
    endif 
    add r5.xyzw, r7.xyzw, r9.xyzw
    add r6.xyzw, r8.xyzw, r10.xyzw
  else 
    mov r2.w, r3.x
  endif 
endif 
mul_sat r4.xyzw, r2.wwww, r5.xyzw
mul_sat r2.xyzw, r2.wwww, r6.xyzw
bfi r1.xyzw, l(2, 2, 2, 2), l(3, 3, 3, 3), r1.zxxz, l(0, 0, 0, 0)
iadd r0.xyzw, r0.xyzw, r1.xyzw
bfi r1.x, l(10), l(5), CB0[0][0].w, l(0)
if_nz r3.z
  ubfe r1.y, l(3), l(4), CB0[0][0].z
  ushr r1.z, CB0[0][0].w, l(10)
  ishl r1.z, r1.z, l(5)
  ishr r3.xyzw, r0.zwzw, l(4, 5, 3, 3)
  ishr r1.w, r1.y, l(2)
  ushr r1.z, r1.z, l(4)
  and r1.z, r1.z, l(0x00007ffe)
  imad r1.z, r1.w, r1.z, r3.x
  ushr r3.x, r1.x, l(5)
  imad r1.z, r1.z, r3.x, r3.y
  ishl r3.x, r0.z, l(8)
  ishr r3.x, r3.x, l(6)
  iadd r1.w, r1.w, r3.z
  bfi r3.y, l(1), l(1), r1.w, l(0)
  iadd r3.y, r3.y, r3.w
  bfi r3.y, l(2), l(1), r3.y, l(0)
  bfi r1.w, l(1), l(0), r1.w, r3.y
  and r3.xy, r3.xxxx, l(16, 8, 0, 0)
  bfi r3.zw, l(0, 0, 22, 22), l(0, 0, 8, 11), r1.zzzz, l(0, 0, 0, 0)
  imad r3.xz, r3.xxxx, l(2, 0, 16, 0), r3.zzwz
  bfi r3.xy, l(5, 5, 0, 0), l(0, 3, 0, 0), r3.yyyy, r3.xzxx
  bfi r1.yz, l(0, 2, 2, 0), l(0, 6, 9, 0), r1.yyyy, r3.xxyx
  ubfe r3.x, l(3), l(6), r1.y
  and r3.y, r1.w, l(6)
  bfi r1.w, l(1), l(8), r1.w, l(0)
  imad r1.w, r3.x, l(32), r1.w
  imad r1.w, r3.y, l(4), r1.w
  bfi r1.yz, l(0, 1, 1, 0), l(0, 4, 7, 0), r0.zzzz, r1.yyzy
  bfi r1.z, l(9), l(3), r1.w, r1.z
  bfi r1.y, l(6), l(0), r1.y, r1.z
else 
  ishr r3.xyzw, r0.xyzw, l(5, 5, 2, 3)
  ushr r0.x, r1.x, l(5)
  imad r0.x, r3.y, r0.x, r3.x
  ishl r0.yw, r0.zzzz, l(0, 2, 0, 7)
  ishl r1.x, r0.y, l(1)
  and r1.x, r1.x, l(96)
  bfi r1.z, l(25), l(7), r0.x, r1.x
  and r0.yw, r0.yyyw, l(0, 8, 0, 2048)
  iadd r1.z, r1.z, r0.y
  bfi r1.z, l(1), l(4), r0.z, r1.z
  ishl r1.xw, r1.xxxx, l(3, 0, 0, 2)
  bfi r1.xw, l(25, 0, 0, 25), l(10, 0, 0, 9), r0.xxxx, r1.xxxw
  imad r0.xy, r0.yyyy, l(8, 4, 0, 0), r1.xwxx
  bfi r0.xy, l(1, 1, 0, 0), l(7, 6, 0, 0), r0.zzzz, r0.xyxx
  bfi r0.x, l(12), l(0), r0.w, r0.x
  and r0.y, r0.y, l(1792)
  iadd r0.x, r0.x, r0.y
  and r0.y, r3.z, l(2)
  iadd r0.y, r3.w, r0.y
  bfi r0.y, l(2), l(6), r0.y, l(0)
  iadd r0.x, r0.x, r0.y
  bfi r1.y, l(6), l(0), r1.z, r0.x
endif 
iadd r0.x, r1.y, CB0[0][1].x
ushr r0.x, r0.x, l(3)
mad r1.xyzw, r4.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
ftou r1.xyzw, r1.xyzw
imad r0.y, r1.y, l(256), r1.x
imad r0.y, r1.z, l(0x00010000), r0.y
imad r1.xzw, r1.wwww, l(0x01000000, 0, 0x01000000, 0x01000000), r0.yyyy
mad r2.xyzw, r2.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
ftou r2.xyzw, r2.xyzw
imad r0.y, r2.y, l(256), r2.x
imad r0.y, r2.z, l(0x00010000), r0.y
imad r1.y, r2.w, l(0x01000000), r0.y
store_uav_typed U0[0].xyzw, r0.xxxx, r1.xyzw
ret 
// Approximately 626 instruction slots used

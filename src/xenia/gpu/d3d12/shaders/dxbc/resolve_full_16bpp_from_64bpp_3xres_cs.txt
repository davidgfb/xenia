//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer XeResolveConstants
// {
//
//   uint xe_resolve_edram_info;        // Offset:    0 Size:     4
//   uint xe_resolve_address_info;      // Offset:    4 Size:     4
//   uint xe_resolve_dest_info;         // Offset:    8 Size:     4
//   uint xe_resolve_dest_pitch_aligned;// Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// xe_resolve_source                 texture   uint2         buf      T0             t0      1 
// xe_resolve_dest                       UAV   uint2         buf      U0             u0      1 
// XeResolveConstants                cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[0:0][1], immediateIndexed, space=0
dcl_resource_buffer (uint,uint,uint,uint) T0[0:0], space=0
dcl_uav_typed_buffer (uint,uint,uint,uint) U0[0:0], space=0
dcl_input vThreadID.xy
dcl_temps 11
dcl_thread_group 8, 8, 1
ishl r0.xw, vThreadID.xxxx, l(2, 0, 0, 2)
ushr r1.x, CB0[0][0].y, l(7)
bfi r1.x, l(11), l(3), r1.x, l(0)
uge r1.x, r0.w, r1.x
if_nz r1.x
  ret 
endif 
ushr r1.xy, CB0[0][0].yyyy, l(5, 29, 0, 0)
mov r1.z, CB0[0][0].y
bfi r2.xy, l(5, 2, 0, 0), l(3, 3, 0, 0), r1.zxzz, l(0, 0, 0, 0)
mov r0.yz, vThreadID.yyyy
iadd r2.xy, r0.wzww, r2.xyxx
and r3.xyzw, CB0[0][0].xxzz, l(1023, 0x40000000, 7, 8)
ubfe r4.xyzw, l(12, 2, 6, 4), l(13, 10, 7, 25), CB0[0][0].xxzx
uge r1.w, l(3), r1.y
if_nz r1.w
  mov r5.y, r1.y
else 
  ieq r1.w, r1.y, l(5)
  if_nz r1.w
    mov r5.y, l(2)
  else 
    mov r5.y, l(0)
  endif 
endif 
uge r2.zw, r4.yyyy, l(0, 0, 2, 1)
and r5.zw, r2.zzzw, l(0, 0, 1, 1)
ishl r2.xy, r2.xyxx, r5.zwzz
ushr r5.x, r5.y, l(1)
and r5.xy, r5.xyxx, l(1, 1, 0, 0)
iadd r2.xy, r2.xyxx, r5.xyxx
udiv r5.xy, null, r2.xyxx, l(80, 16, 0, 0)
ishl r1.w, r5.x, l(1)
imad r1.w, r5.y, r3.x, r1.w
iadd r1.w, r1.w, r4.x
imad r2.xy, -r5.xyxx, l(80, 16, 0, 0), r2.xyxx
imad r2.x, r2.y, l(80), r2.x
ishl r2.x, r2.x, l(1)
imad r1.w, r1.w, l(1280), r2.x
imul null, r1.w, r1.w, l(9)
ushr r1.w, r1.w, l(1)
movc r2.x, r2.z, l(18), l(9)
movc r2.yz, r0.wwzw, l(0,0,0,0), l(0,1,1,0)
movc r2.yz, r3.yyyy, r2.yyzy, l(0,0,0,0)
bfi r5.xyzw, l(2, 2, 2, 2), l(3, 3, 3, 3), r1.zxxz, l(0, 0, 0, 0)
iadd r0.xyzw, r0.xyzw, r5.xyzw
bfi r1.x, l(10), l(5), CB0[0][0].w, l(0)
if_nz r3.w
  ubfe r1.z, l(3), l(4), CB0[0][0].z
  ushr r2.w, CB0[0][0].w, l(10)
  ishl r2.w, r2.w, l(5)
  ishr r5.xyzw, r0.zwzw, l(4, 5, 3, 3)
  ishr r3.x, r1.z, l(2)
  ushr r2.w, r2.w, l(4)
  and r2.w, r2.w, l(0x00007ffe)
  imad r2.w, r3.x, r2.w, r5.x
  ushr r3.y, r1.x, l(5)
  imad r2.w, r2.w, r3.y, r5.y
  ishl r3.y, r0.z, l(9)
  and r3.y, r3.y, l(3072)
  bfi r3.y, l(3), l(7), r0.w, r3.y
  ishr r3.y, r3.y, l(6)
  iadd r3.x, r3.x, r5.z
  bfi r3.w, l(1), l(1), r3.x, l(0)
  iadd r3.w, r3.w, r5.w
  bfi r3.w, l(2), l(1), r3.w, l(0)
  bfi r3.x, l(1), l(0), r3.x, r3.w
  and r3.w, r3.y, l(48)
  bfi r4.xy, l(21, 21, 0, 0), l(9, 12, 0, 0), r2.wwww, l(0, 0, 0, 0)
  imad r4.xy, r3.wwww, l(2, 16, 0, 0), r4.xyxx
  bfi r3.yw, l(0, 4, 0, 4), l(0, 0, 0, 3), r3.yyyy, r4.xxxy
  bfi r3.yw, l(0, 2, 0, 2), l(0, 7, 0, 10), r1.zzzz, r3.yyyw
  ubfe r1.z, l(3), l(6), r3.y
  and r2.w, r3.x, l(6)
  bfi r3.x, l(1), l(8), r3.x, l(0)
  imad r1.z, r1.z, l(32), r3.x
  imad r1.z, r2.w, l(4), r1.z
  bfi r3.xy, l(1, 1, 0, 0), l(4, 7, 0, 0), r0.zzzz, r3.ywyy
  bfi r1.z, l(9), l(3), r1.z, r3.y
  bfi r1.z, l(6), l(0), r3.x, r1.z
else 
  ishr r5.xyzw, r0.xyzw, l(5, 5, 2, 3)
  ushr r0.x, r1.x, l(5)
  imad r0.x, r5.y, r0.x, r5.x
  ishl r3.xy, r0.zzzz, l(3, 7, 0, 0)
  and r3.xy, r3.xyxx, l(112, 2048, 0, 0)
  bfi r0.y, l(3), l(1), r0.w, r3.x
  ishl r1.x, r3.x, l(1)
  bfi r0.w, l(3), l(2), r0.w, r1.x
  and r0.w, r0.w, l(224)
  bfi r1.x, l(24), l(8), r0.x, r0.w
  bfi r1.x, l(4), l(0), r0.y, r1.x
  bfi r1.x, l(1), l(4), r0.z, r1.x
  ishl r3.xw, r0.wwww, l(3, 0, 0, 2)
  bfi r0.xw, l(24, 0, 0, 24), l(11, 0, 0, 10), r0.xxxx, r3.xxxw
  bfi r0.xy, l(4, 4, 0, 0), l(3, 2, 0, 0), r0.yyyy, r0.xwxx
  bfi r0.xy, l(1, 1, 0, 0), l(7, 6, 0, 0), r0.zzzz, r0.xyxx
  bfi r0.x, l(12), l(0), r3.y, r0.x
  and r0.y, r0.y, l(1792)
  iadd r0.x, r0.x, r0.y
  and r0.y, r5.z, l(2)
  iadd r0.y, r5.w, r0.y
  bfi r0.y, l(2), l(6), r0.y, l(0)
  iadd r0.x, r0.x, r0.y
  bfi r1.z, l(6), l(0), r1.x, r0.x
endif 
imul null, r0.x, r1.z, l(9)
ushr r0.x, r0.x, l(3)
imad r0.y, r2.z, l(3), r1.w
iadd r0.z, r2.y, r0.y
ld r5.yw, r0.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r1.xz, r5.yywy, l(16, 0, 16, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r1.zzzx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
ibfe r0.w, l(6), l(16), CB0[0][0].z
ishl r0.w, r0.w, l(23)
iadd r0.w, r0.w, l(0x3f800000)
uge r1.x, r1.y, l(4)
if_nz r1.x
  mul r1.z, r0.w, l(0.500000)
  iadd r2.w, r0.z, l(720)
  ld r6.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r3.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.z, r0.w, l(0.250000)
    iadd r3.xy, r0.zzzz, l(9, 729, 0, 0)
    ld r6.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xw, r6.yyyw, l(16, 0, 0, 16)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r3.wwwx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r1.z, r0.w
endif 
mul r5.xyzw, r1.zzzz, r5.ywxz
and r0.z, CB0[0][0].z, l(0x01000000)
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
iadd r3.xy, r0.yyyy, l(1, 2, 0, 0)
ld r6.yw, r3.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xw, r6.yyyw, l(16, 0, 0, 16)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.wwwx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.z, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(721)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xw, r7.yyyw, l(16, 0, 0, 16)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.wwwx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.z, r0.w, l(0.250000)
    iadd r3.xw, r0.yyyy, l(10, 0, 0, 730)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xw, r8.yyyw, l(16, 0, 0, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r1.z, r0.w
endif 
mul r6.xyzw, r1.zzzz, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.z, r7.y, l(32), r7.x
  imad r1.z, r7.z, l(1024), r1.z
  imad r1.z, r7.w, l(0x00008000), r1.z
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  ishl r3.x, r7.w, l(31)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.x, r1.z, r2.w
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.z, r7.y, l(32), r7.x
  imad r1.z, r7.z, l(2048), r1.z
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.x, r7.z, l(27)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.x, r1.z, r2.w
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.z, r7.y, l(32), r7.x
  imad r1.z, r7.z, l(1024), r1.z
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.x, r7.z, l(26)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.x, r1.z, r2.w
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r6.xxxy
  mad r7.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.z, r7.y, l(256), r7.x
  imad r1.z, r7.z, l(0x00010000), r1.z
  imad r4.x, r7.w, l(0x01000000), r1.z
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.z, r7.y, l(16), r7.x
  imad r1.z, r7.z, l(256), r1.z
  imad r1.z, r7.w, l(4096), r1.z
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  ishl r3.x, r7.w, l(28)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.x, r1.z, r2.w
  break 
  case l(24)
  mov_sat r6.z, r5.x
  mov_sat r6.x, r6.x
  mad r3.xw, r6.zzzx, l(65535.000000, 0.000000, 0.000000, 65535.000000), l(0.500000, 0.000000, 0.000000, 0.500000)
  ftou r3.xw, r3.xxxw
  imad r4.x, r3.w, l(0x00010000), r3.x
  break 
  default 
  f32tof16 r1.z, r5.x
  f32tof16 r2.w, r6.x
  imad r4.x, r2.w, l(0x00010000), r1.z
  break 
endswitch 
ld r5.yw, r3.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r3.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.z, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(722)
  ld r6.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r3.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.z, r0.w, l(0.250000)
    iadd r3.xy, r0.yyyy, l(11, 731, 0, 0)
    ld r6.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xw, r6.yyyw, l(16, 0, 0, 16)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r3.wwwx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r1.z, r0.w
endif 
mul r5.xyzw, r1.zzzz, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
iadd r0.y, r1.w, r2.y
iadd r3.xy, r0.yyyy, l(3, 6, 0, 0)
ld r6.yw, r3.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xw, r6.yyyw, l(16, 0, 0, 16)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.wwwx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.z, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(723)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xw, r7.yyyw, l(16, 0, 0, 16)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.wwwx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.z, r0.w, l(0.250000)
    iadd r3.xw, r0.yyyy, l(12, 0, 0, 732)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r8.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r8.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xw, r8.yyyw, l(16, 0, 0, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r1.z, r0.w
endif 
mul r6.xyzw, r1.zzzz, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.z, r7.y, l(32), r7.x
  imad r1.z, r7.z, l(1024), r1.z
  imad r1.z, r7.w, l(0x00008000), r1.z
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  ishl r3.x, r7.w, l(31)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.z, r2.w
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.z, r7.y, l(32), r7.x
  imad r1.z, r7.z, l(2048), r1.z
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.x, r7.z, l(27)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.z, r2.w
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.z, r7.y, l(32), r7.x
  imad r1.z, r7.z, l(1024), r1.z
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.x, r7.z, l(26)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.z, r2.w
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r6.xxxy
  mad r7.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.z, r7.y, l(256), r7.x
  imad r1.z, r7.z, l(0x00010000), r1.z
  imad r4.y, r7.w, l(0x01000000), r1.z
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.z, r7.y, l(16), r7.x
  imad r1.z, r7.z, l(256), r1.z
  imad r1.z, r7.w, l(4096), r1.z
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  ishl r3.x, r7.w, l(28)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.z, r2.w
  break 
  case l(24)
  mov_sat r6.z, r5.x
  mov_sat r6.x, r6.x
  mad r3.xw, r6.zzzx, l(65535.000000, 0.000000, 0.000000, 65535.000000), l(0.500000, 0.000000, 0.000000, 0.500000)
  ftou r3.xw, r3.xxxw
  imad r4.y, r3.w, l(0x00010000), r3.x
  break 
  default 
  f32tof16 r1.z, r5.x
  f32tof16 r2.w, r6.x
  imad r4.y, r2.w, l(0x00010000), r1.z
  break 
endswitch 
ieq r1.z, r3.z, l(1)
if_nz r1.z
  ishl r3.xz, r4.xxyx, l(8, 0, 8, 0)
  and r3.xz, r3.xxzx, l(0xff00ff00, 0, 0xff00ff00, 0)
  ushr r5.xy, r4.xyxx, l(8, 8, 0, 0)
  and r5.xy, r5.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r4.xy, r3.xzxx, r5.xyxx
endif 
store_uav_typed U0[0].xyzw, r0.xxxx, r4.xyxx
iadd r5.xyzw, r1.wwww, l(4, 5, 7, 8)
ld r6.yw, r5.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xz, r6.yywy, l(16, 0, 16, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.zzzx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r1.w, l(724)
  ld r7.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xz, r7.yywy, l(16, 0, 16, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.zzzx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r3.xz, r1.wwww, l(13, 0, 733, 0)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xw, r7.yyyw, l(16, 0, 0, 16)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.wwwx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r3.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r8.yywy, l(16, 0, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.zzzx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r6.xyzw, r2.wwww, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
ld r7.yw, r5.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xz, r7.yywy, l(16, 0, 16, 0)
  f16tof32 r7.xy, r7.wyww
  f16tof32 r7.zw, r3.zzzx
  break 
  default 
  mov r7.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r1.w, l(725)
  ld r8.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xz, r8.yywy, l(16, 0, 16, 0)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r3.zzzx
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r7.xyzw, r7.xyzw, r8.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r3.xz, r1.wwww, l(14, 0, 734, 0)
    ld r8.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xw, r8.yyyw, l(16, 0, 0, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r7.ywxz, r8.ywxz
    ld r9.yw, r3.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r9.yywy, l(16, 0, 16, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r3.zzzx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r7.xyzw, r2.wwww, r7.ywxz
if_nz r0.z
  mov r7.xz, r7.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(1024), r2.w
  imad r2.w, r8.w, l(0x00008000), r2.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r3.x, r8.y, l(32), r8.x
  imad r3.x, r8.z, l(1024), r3.x
  ishl r3.z, r8.w, l(31)
  imad r3.x, r3.x, l(0x00010000), r3.z
  iadd r4.x, r2.w, r3.x
  break 
  case l(4)
  mov_sat r6.xyz, r6.xyzx
  mad r3.xzw, r6.xxyz, l(31.000000, 0.000000, 63.000000, 31.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r3.xzw, r3.xxzw
  imad r2.w, r3.z, l(32), r3.x
  imad r2.w, r3.w, l(2048), r2.w
  mov_sat r7.xyz, r7.xyzx
  mad r3.xzw, r7.xxyz, l(31.000000, 0.000000, 63.000000, 31.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r3.xzw, r3.xxzw
  imad r3.x, r3.z, l(32), r3.x
  ishl r3.z, r3.w, l(27)
  imad r3.x, r3.x, l(0x00010000), r3.z
  iadd r4.x, r2.w, r3.x
  break 
  case l(5)
  mov_sat r6.xyz, r6.xyzx
  mad r3.xzw, r6.xxyz, l(31.000000, 0.000000, 31.000000, 63.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r3.xzw, r3.xxzw
  imad r2.w, r3.z, l(32), r3.x
  imad r2.w, r3.w, l(1024), r2.w
  mov_sat r7.xyz, r7.xyzx
  mad r3.xzw, r7.xxyz, l(31.000000, 0.000000, 31.000000, 63.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r3.xzw, r3.xxzw
  imad r3.x, r3.z, l(32), r3.x
  ishl r3.z, r3.w, l(26)
  imad r3.x, r3.x, l(0x00010000), r3.z
  iadd r4.x, r2.w, r3.x
  break 
  case l(10)
  mov_sat r6.xy, r6.xyxx
  mov_sat r6.zw, r7.xxxy
  mad r8.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(256), r8.x
  imad r2.w, r8.z, l(0x00010000), r2.w
  imad r4.x, r8.w, l(0x01000000), r2.w
  break 
  case l(15)
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(16), r8.x
  imad r2.w, r8.z, l(256), r2.w
  imad r2.w, r8.w, l(4096), r2.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r3.x, r8.y, l(16), r8.x
  imad r3.x, r8.z, l(256), r3.x
  ishl r3.z, r8.w, l(28)
  imad r3.x, r3.x, l(0x00010000), r3.z
  iadd r4.x, r2.w, r3.x
  break 
  case l(24)
  mov_sat r7.z, r6.x
  mov_sat r7.x, r7.x
  mad r3.xz, r7.zzxz, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r3.xz, r3.xxzx
  imad r4.x, r3.z, l(0x00010000), r3.x
  break 
  default 
  f32tof16 r2.w, r6.x
  f32tof16 r3.x, r7.x
  imad r4.x, r3.x, l(0x00010000), r2.w
  break 
endswitch 
ld r3.yw, r3.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r3.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r3.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r5.xy, r3.ywyy, l(16, 16, 0, 0)
  f16tof32 r3.xy, r3.wyww
  f16tof32 r3.zw, r5.yyyx
  break 
  default 
  mov r3.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r5.x, r0.y, l(726)
  ld r6.yw, r5.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r5.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r5.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r3.xyzw, r3.xyzw, r6.xyzw
  uge r5.x, r1.y, l(6)
  if_nz r5.x
    mul r2.w, r0.w, l(0.250000)
    iadd r5.xy, r0.yyyy, l(15, 735, 0, 0)
    ld r6.yw, r5.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r7.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r7.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r3.ywxz, r6.ywxz
    ld r7.yw, r5.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r5.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r3.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r3.xyzw, r2.wwww, r3.ywxz
if_nz r0.z
  mov r3.xz, r3.zzxz
endif 
ld r6.yw, r5.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r5.xy, r6.ywyy, l(16, 16, 0, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r5.yyyx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.y, r0.w, l(0.500000)
  iadd r2.w, r1.w, l(727)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r5.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r5.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.y, r0.w, l(0.250000)
    iadd r5.xy, r1.wwww, l(16, 736, 0, 0)
    ld r7.yw, r5.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xz, r7.yywy, l(16, 0, 16, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r5.zzzx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r5.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r5.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r0.y, r0.w
endif 
mul r6.xyzw, r0.yyyy, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r0.y, r7.y, l(32), r7.x
  imad r0.y, r7.z, l(1024), r0.y
  imad r0.y, r7.w, l(0x00008000), r0.y
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  ishl r5.x, r7.w, l(31)
  imad r2.w, r2.w, l(0x00010000), r5.x
  iadd r4.y, r0.y, r2.w
  break 
  case l(4)
  mov_sat r3.xyz, r3.xyzx
  mad r5.xyz, r3.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r0.y, r5.y, l(32), r5.x
  imad r0.y, r5.z, l(2048), r0.y
  mov_sat r6.xyz, r6.xyzx
  mad r5.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r2.w, r5.y, l(32), r5.x
  ishl r5.x, r5.z, l(27)
  imad r2.w, r2.w, l(0x00010000), r5.x
  iadd r4.y, r0.y, r2.w
  break 
  case l(5)
  mov_sat r3.xyz, r3.xyzx
  mad r5.xyz, r3.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r0.y, r5.y, l(32), r5.x
  imad r0.y, r5.z, l(1024), r0.y
  mov_sat r6.xyz, r6.xyzx
  mad r5.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r2.w, r5.y, l(32), r5.x
  ishl r5.x, r5.z, l(26)
  imad r2.w, r2.w, l(0x00010000), r5.x
  iadd r4.y, r0.y, r2.w
  break 
  case l(10)
  mov_sat r3.xy, r3.xyxx
  mov_sat r3.zw, r6.xxxy
  mad r7.xyzw, r3.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r0.y, r7.y, l(256), r7.x
  imad r0.y, r7.z, l(0x00010000), r0.y
  imad r4.y, r7.w, l(0x01000000), r0.y
  break 
  case l(15)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r0.y, r7.y, l(16), r7.x
  imad r0.y, r7.z, l(256), r0.y
  imad r0.y, r7.w, l(4096), r0.y
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  ishl r3.y, r7.w, l(28)
  imad r2.w, r2.w, l(0x00010000), r3.y
  iadd r4.y, r0.y, r2.w
  break 
  case l(24)
  mov_sat r6.z, r3.x
  mov_sat r6.x, r6.x
  mad r3.yz, r6.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r3.yz, r3.yyzy
  imad r4.y, r3.z, l(0x00010000), r3.y
  break 
  default 
  f32tof16 r0.y, r3.x
  f32tof16 r2.w, r6.x
  imad r4.y, r2.w, l(0x00010000), r0.y
  break 
endswitch 
iadd r3.xyzw, r0.xxxx, l(1, 2, 3, 4)
if_nz r1.z
  ishl r5.xy, r4.xyxx, l(8, 8, 0, 0)
  and r5.xy, r5.xyxx, l(0xff00ff00, 0xff00ff00, 0, 0)
  ushr r6.xy, r4.xyxx, l(8, 8, 0, 0)
  and r6.xy, r6.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r4.xy, r5.xyxx, r6.xyxx
endif 
store_uav_typed U0[0].xyzw, r3.xxxx, r4.xyxx
ld r5.yw, r5.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r4.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r0.y, r0.w, l(0.500000)
  iadd r2.w, r1.w, l(728)
  ld r6.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r4.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r0.y, r0.w, l(0.250000)
    iadd r4.xy, r1.wwww, l(17, 737, 0, 0)
    ld r6.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r7.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r7.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r0.y, r0.w
endif 
mul r5.xyzw, r0.yyyy, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
iadd r0.y, r1.w, r2.x
imad r1.w, r2.z, l(3), r0.y
iadd r2.w, r2.y, r1.w
ld r6.yw, r2.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r4.yyyx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r3.x, r0.w, l(0.500000)
  iadd r4.x, r2.w, l(720)
  ld r7.yw, r4.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r4.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r4.x, r1.y, l(6)
  if_nz r4.x
    mul r3.x, r0.w, l(0.250000)
    iadd r4.xy, r2.wwww, l(9, 729, 0, 0)
    ld r7.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r8.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r8.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r4.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r3.x, r0.w
endif 
mul r6.xyzw, r3.xxxx, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  imad r2.w, r7.w, l(0x00008000), r2.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r3.x, r7.y, l(32), r7.x
  imad r3.x, r7.z, l(1024), r3.x
  ishl r7.x, r7.w, l(31)
  imad r3.x, r3.x, l(0x00010000), r7.x
  iadd r4.x, r2.w, r3.x
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(2048), r2.w
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r3.x, r7.y, l(32), r7.x
  ishl r7.x, r7.z, l(27)
  imad r3.x, r3.x, l(0x00010000), r7.x
  iadd r4.x, r2.w, r3.x
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r3.x, r7.y, l(32), r7.x
  ishl r7.x, r7.z, l(26)
  imad r3.x, r3.x, l(0x00010000), r7.x
  iadd r4.x, r2.w, r3.x
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r6.xxxy
  mad r7.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(256), r7.x
  imad r2.w, r7.z, l(0x00010000), r2.w
  imad r4.x, r7.w, l(0x01000000), r2.w
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  imad r2.w, r7.w, l(4096), r2.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r3.x, r7.y, l(16), r7.x
  imad r3.x, r7.z, l(256), r3.x
  ishl r5.y, r7.w, l(28)
  imad r3.x, r3.x, l(0x00010000), r5.y
  iadd r4.x, r2.w, r3.x
  break 
  case l(24)
  mov_sat r6.z, r5.x
  mov_sat r6.x, r6.x
  mad r5.yz, r6.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r5.yz, r5.yyzy
  imad r4.x, r5.z, l(0x00010000), r5.y
  break 
  default 
  f32tof16 r2.w, r5.x
  f32tof16 r3.x, r6.x
  imad r4.x, r3.x, l(0x00010000), r2.w
  break 
endswitch 
iadd r5.xy, r1.wwww, l(1, 2, 0, 0)
ld r6.yw, r5.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r5.xz, r6.yywy, l(16, 0, 16, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r5.zzzx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r1.w, l(721)
  ld r7.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r5.xz, r7.yywy, l(16, 0, 16, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r5.zzzx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r5.xz, r1.wwww, l(10, 0, 730, 0)
    ld r7.yw, r5.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xw, r7.yyyw, l(16, 0, 0, 16)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r5.wwwx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r5.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xz, r8.yywy, l(16, 0, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r5.zzzx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r6.xyzw, r2.wwww, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
ld r5.yw, r5.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r7.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r7.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r1.w, l(722)
  ld r7.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r8.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r8.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r7.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r7.xy, r1.wwww, l(11, 731, 0, 0)
    ld r8.yw, r7.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r7.xz, r8.yywy, l(16, 0, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r7.zzzx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r5.ywxz, r8.ywxz
    ld r7.yw, r7.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r9.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r9.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r7.xyzw, r8.zxwy
  endif 
else 
  mov r2.w, r0.w
endif 
mul r5.xyzw, r2.wwww, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(1024), r1.w
  imad r1.w, r7.w, l(0x00008000), r1.w
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  ishl r3.x, r7.w, l(31)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(4)
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(2048), r1.w
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.x, r7.z, l(27)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(5)
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(1024), r1.w
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.x, r7.z, l(26)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(10)
  mov_sat r6.xy, r6.xyxx
  mov_sat r6.zw, r5.xxxy
  mad r7.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(256), r7.x
  imad r1.w, r7.z, l(0x00010000), r1.w
  imad r4.y, r7.w, l(0x01000000), r1.w
  break 
  case l(15)
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(16), r7.x
  imad r1.w, r7.z, l(256), r1.w
  imad r1.w, r7.w, l(4096), r1.w
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  ishl r3.x, r7.w, l(28)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(24)
  mov_sat r5.z, r6.x
  mov_sat r5.x, r5.x
  mad r5.yz, r5.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r5.yz, r5.yyzy
  imad r4.y, r5.z, l(0x00010000), r5.y
  break 
  default 
  f32tof16 r1.w, r6.x
  f32tof16 r2.w, r5.x
  imad r4.y, r2.w, l(0x00010000), r1.w
  break 
endswitch 
if_nz r1.z
  ishl r5.xy, r4.xyxx, l(8, 8, 0, 0)
  ushr r5.zw, r4.xxxy, l(0, 0, 8, 8)
  and r5.xyzw, r5.xyzw, l(0xff00ff00, 0xff00ff00, 0x00ff00ff, 0x00ff00ff)
  iadd r4.xy, r5.zwzz, r5.xyxx
endif 
store_uav_typed U0[0].xyzw, r3.yyyy, r4.xyxx
iadd r1.w, r2.y, r0.y
iadd r3.xy, r1.wwww, l(3, 6, 0, 0)
ld r5.yw, r3.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r4.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r1.w, l(723)
  ld r6.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r4.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r4.xy, r1.wwww, l(12, 732, 0, 0)
    ld r6.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r7.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r7.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r5.xyzw, r2.wwww, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
iadd r6.xyzw, r0.yyyy, l(4, 5, 7, 8)
ld r7.yw, r6.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
  f16tof32 r7.xy, r7.wyww
  f16tof32 r7.zw, r4.yyyx
  break 
  default 
  mov r7.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r0.y, l(724)
  ld r8.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r8.ywyy, l(16, 16, 0, 0)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r4.yyyx
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r7.xyzw, r7.xyzw, r8.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r4.xy, r0.yyyy, l(13, 733, 0, 0)
    ld r8.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r9.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r9.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r7.ywxz, r8.ywxz
    ld r9.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r9.ywyy, l(16, 16, 0, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r4.yyyx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r7.xyzw, r2.wwww, r7.ywxz
if_nz r0.z
  mov r7.xz, r7.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(1024), r2.w
  imad r2.w, r8.w, l(0x00008000), r2.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r3.x, r8.y, l(32), r8.x
  imad r3.x, r8.z, l(1024), r3.x
  ishl r6.x, r8.w, l(31)
  imad r3.x, r3.x, l(0x00010000), r6.x
  iadd r4.x, r2.w, r3.x
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(2048), r2.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r3.x, r8.y, l(32), r8.x
  ishl r6.x, r8.z, l(27)
  imad r3.x, r3.x, l(0x00010000), r6.x
  iadd r4.x, r2.w, r3.x
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(1024), r2.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r3.x, r8.y, l(32), r8.x
  ishl r6.x, r8.z, l(26)
  imad r3.x, r3.x, l(0x00010000), r6.x
  iadd r4.x, r2.w, r3.x
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r7.xxxy
  mad r8.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(256), r8.x
  imad r2.w, r8.z, l(0x00010000), r2.w
  imad r4.x, r8.w, l(0x01000000), r2.w
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(16), r8.x
  imad r2.w, r8.z, l(256), r2.w
  imad r2.w, r8.w, l(4096), r2.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r3.x, r8.y, l(16), r8.x
  imad r3.x, r8.z, l(256), r3.x
  ishl r5.y, r8.w, l(28)
  imad r3.x, r3.x, l(0x00010000), r5.y
  iadd r4.x, r2.w, r3.x
  break 
  case l(24)
  mov_sat r7.z, r5.x
  mov_sat r7.x, r7.x
  mad r5.yz, r7.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r5.yz, r5.yyzy
  imad r4.x, r5.z, l(0x00010000), r5.y
  break 
  default 
  f32tof16 r2.w, r5.x
  f32tof16 r3.x, r7.x
  imad r4.x, r3.x, l(0x00010000), r2.w
  break 
endswitch 
ld r5.yw, r6.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r6.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r6.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r0.y, l(725)
  ld r7.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r6.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r6.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r7.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r6.xy, r0.yyyy, l(14, 734, 0, 0)
    ld r7.yw, r6.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r8.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r8.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r5.ywxz, r7.ywxz
    ld r8.yw, r6.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r6.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r6.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r5.xyzw, r2.wwww, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
ld r7.yw, r3.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
  f16tof32 r7.xy, r7.wyww
  f16tof32 r7.zw, r3.yyyx
  break 
  default 
  mov r7.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r1.w, l(726)
  ld r8.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r8.ywyy, l(16, 16, 0, 0)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r3.yyyx
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r7.xyzw, r7.xyzw, r8.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r3.xy, r1.wwww, l(15, 735, 0, 0)
    ld r8.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r6.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r6.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r7.ywxz, r8.ywxz
    ld r9.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r9.ywyy, l(16, 16, 0, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r3.yyyx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r7.xyzw, r2.wwww, r7.ywxz
if_nz r0.z
  mov r7.xz, r7.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(32), r8.x
  imad r1.w, r8.z, l(1024), r1.w
  imad r1.w, r8.w, l(0x00008000), r1.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(1024), r2.w
  ishl r3.x, r8.w, l(31)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r1.w, r8.y, l(32), r8.x
  imad r1.w, r8.z, l(2048), r1.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  ishl r3.x, r8.z, l(27)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r1.w, r8.y, l(32), r8.x
  imad r1.w, r8.z, l(1024), r1.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  ishl r3.x, r8.z, l(26)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r7.xxxy
  mad r8.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(256), r8.x
  imad r1.w, r8.z, l(0x00010000), r1.w
  imad r4.y, r8.w, l(0x01000000), r1.w
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(16), r8.x
  imad r1.w, r8.z, l(256), r1.w
  imad r1.w, r8.w, l(4096), r1.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(16), r8.x
  imad r2.w, r8.z, l(256), r2.w
  ishl r3.x, r8.w, l(28)
  imad r2.w, r2.w, l(0x00010000), r3.x
  iadd r4.y, r1.w, r2.w
  break 
  case l(24)
  mov_sat r7.z, r5.x
  mov_sat r7.x, r7.x
  mad r3.xy, r7.zxzz, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r3.xy, r3.xyxx
  imad r4.y, r3.y, l(0x00010000), r3.x
  break 
  default 
  f32tof16 r1.w, r5.x
  f32tof16 r2.w, r7.x
  imad r4.y, r2.w, l(0x00010000), r1.w
  break 
endswitch 
if_nz r1.z
  ishl r3.xy, r4.xyxx, l(8, 8, 0, 0)
  and r3.xy, r3.xyxx, l(0xff00ff00, 0xff00ff00, 0, 0)
  ushr r5.xy, r4.xyxx, l(8, 8, 0, 0)
  and r5.xy, r5.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r4.xy, r3.xyxx, r5.xyxx
endif 
store_uav_typed U0[0].xyzw, r3.zzzz, r4.xyxx
ld r5.yw, r6.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r3.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(727)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.w, r0.w, l(0.250000)
    iadd r3.xy, r0.yyyy, l(16, 736, 0, 0)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r7.yywy, l(16, 0, 16, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.zzzx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r5.ywxz, r7.ywxz
    ld r8.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r5.xyzw, r1.wwww, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
ld r6.yw, r6.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r6.ywyy, l(16, 16, 0, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.yyyx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(728)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.w, r0.w, l(0.250000)
    iadd r3.xy, r0.yyyy, l(17, 737, 0, 0)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r7.yywy, l(16, 0, 16, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.zzzx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r6.xyzw, r1.wwww, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(1024), r1.w
  imad r1.w, r7.w, l(0x00008000), r1.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  ishl r3.z, r7.w, l(31)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(2048), r1.w
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.z, r7.z, l(27)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(1024), r1.w
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  ishl r3.z, r7.z, l(26)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r6.xxxy
  mad r7.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(256), r7.x
  imad r1.w, r7.z, l(0x00010000), r1.w
  imad r3.x, r7.w, l(0x01000000), r1.w
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(16), r7.x
  imad r1.w, r7.z, l(256), r1.w
  imad r1.w, r7.w, l(4096), r1.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  ishl r3.z, r7.w, l(28)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(24)
  mov_sat r6.z, r5.x
  mov_sat r6.x, r6.x
  mad r4.xy, r6.zxzz, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r4.xy, r4.xyxx
  imad r3.x, r4.y, l(0x00010000), r4.x
  break 
  default 
  f32tof16 r1.w, r5.x
  f32tof16 r2.w, r6.x
  imad r3.x, r2.w, l(0x00010000), r1.w
  break 
endswitch 
iadd r0.y, r2.x, r0.y
imad r1.w, r2.z, l(3), r0.y
iadd r2.w, r2.y, r1.w
ld r5.yw, r2.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r4.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r3.z, r0.w, l(0.500000)
  iadd r4.x, r2.w, l(720)
  ld r6.yw, r4.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r4.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r4.x, r1.y, l(6)
  if_nz r4.x
    mul r3.z, r0.w, l(0.250000)
    iadd r4.xy, r2.wwww, l(9, 729, 0, 0)
    ld r6.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r7.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r7.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r5.ywxz, r6.ywxz
    ld r7.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r3.z, r0.w
endif 
mul r5.xyzw, r3.zzzz, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
iadd r4.xy, r1.wwww, l(1, 2, 0, 0)
ld r6.yw, r4.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r7.xy, r6.ywyy, l(16, 16, 0, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r7.yyyx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.z, r1.w, l(721)
  ld r7.yw, r3.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r8.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r8.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r3.z, r1.y, l(6)
  if_nz r3.z
    mul r2.w, r0.w, l(0.250000)
    iadd r7.xy, r1.wwww, l(10, 730, 0, 0)
    ld r8.yw, r7.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r7.xz, r8.yywy, l(16, 0, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r7.zzzx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r6.ywxz, r8.ywxz
    ld r7.yw, r7.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r9.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r9.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.xyzw, r8.zxwy
  endif 
else 
  mov r2.w, r0.w
endif 
mul r6.xyzw, r2.wwww, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  imad r2.w, r7.w, l(0x00008000), r2.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r3.z, r7.y, l(32), r7.x
  imad r3.z, r7.z, l(1024), r3.z
  ishl r4.x, r7.w, l(31)
  imad r3.z, r3.z, l(0x00010000), r4.x
  iadd r3.y, r2.w, r3.z
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(2048), r2.w
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r3.z, r7.y, l(32), r7.x
  ishl r4.x, r7.z, l(27)
  imad r3.z, r3.z, l(0x00010000), r4.x
  iadd r3.y, r2.w, r3.z
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  mov_sat r6.xyz, r6.xyzx
  mad r7.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r3.z, r7.y, l(32), r7.x
  ishl r4.x, r7.z, l(26)
  imad r3.z, r3.z, l(0x00010000), r4.x
  iadd r3.y, r2.w, r3.z
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r6.xxxy
  mad r7.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(256), r7.x
  imad r2.w, r7.z, l(0x00010000), r2.w
  imad r3.y, r7.w, l(0x01000000), r2.w
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  imad r2.w, r7.w, l(4096), r2.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r3.z, r7.y, l(16), r7.x
  imad r3.z, r7.z, l(256), r3.z
  ishl r4.x, r7.w, l(28)
  imad r3.z, r3.z, l(0x00010000), r4.x
  iadd r3.y, r2.w, r3.z
  break 
  case l(24)
  mov_sat r6.z, r5.x
  mov_sat r6.x, r6.x
  mad r5.yz, r6.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r5.yz, r5.yyzy
  imad r3.y, r5.z, l(0x00010000), r5.y
  break 
  default 
  f32tof16 r2.w, r5.x
  f32tof16 r3.z, r6.x
  imad r3.y, r3.z, l(0x00010000), r2.w
  break 
endswitch 
if_nz r1.z
  ishl r5.xy, r3.xyxx, l(8, 8, 0, 0)
  ushr r5.zw, r3.xxxy, l(0, 0, 8, 8)
  and r5.xyzw, r5.xyzw, l(0xff00ff00, 0xff00ff00, 0x00ff00ff, 0x00ff00ff)
  iadd r3.xy, r5.zwzz, r5.xyxx
endif 
store_uav_typed U0[0].xyzw, r3.wwww, r3.xyxx
ld r3.yw, r4.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
  ishr r5.xyzw, r3.xyzw, l(16, 16, 16, 16)
  itof r5.xyzw, r5.xyzw
  mul r5.xyzw, r5.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r3.xyzw, r5.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r3.ywyy, l(16, 16, 0, 0)
  f16tof32 r3.xy, r3.wyww
  f16tof32 r3.zw, r4.yyyx
  break 
  default 
  mov r3.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r4.x, r1.w, l(722)
  ld r5.yw, r4.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
    ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
    itof r6.xyzw, r6.xyzw
    mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r5.ywyy, l(16, 16, 0, 0)
    f16tof32 r5.xy, r5.wyww
    f16tof32 r5.zw, r4.yyyx
    break 
    default 
    mov r5.xz, l(0,0,0,0)
    break 
  endswitch 
  add r3.xyzw, r3.xyzw, r5.xyzw
  uge r4.x, r1.y, l(6)
  if_nz r4.x
    mul r2.w, r0.w, l(0.250000)
    iadd r4.xy, r1.wwww, l(11, 731, 0, 0)
    ld r5.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
      ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
      itof r6.xyzw, r6.xyzw
      mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r6.xy, r5.ywyy, l(16, 16, 0, 0)
      f16tof32 r5.xy, r5.wyww
      f16tof32 r5.zw, r6.yyyx
      break 
      default 
      mov r5.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r3.ywxz, r5.ywxz
    ld r6.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r4.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r3.xyzw, r5.zxwy, r6.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r3.xyzw, r2.wwww, r3.ywxz
if_nz r0.z
  mov r3.xz, r3.zzxz
endif 
iadd r1.w, r2.y, r0.y
iadd r4.xy, r1.wwww, l(3, 6, 0, 0)
ld r5.yw, r4.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r6.xy, r5.ywyy, l(16, 16, 0, 0)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r6.yyyx
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r4.x, r1.w, l(723)
  ld r6.yw, r4.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r7.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r7.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r6.xyzw
  uge r4.x, r1.y, l(6)
  if_nz r4.x
    mul r2.w, r0.w, l(0.250000)
    iadd r6.xy, r1.wwww, l(12, 732, 0, 0)
    ld r7.yw, r6.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r6.xz, r7.yywy, l(16, 0, 16, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r6.zzzx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r5.ywxz, r7.ywxz
    ld r6.yw, r6.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r8.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r8.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r6.xyzw, r7.zxwy
  endif 
else 
  mov r2.w, r0.w
endif 
mul r5.xyzw, r2.wwww, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  imad r2.w, r7.w, l(0x00008000), r2.w
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r4.x, r7.y, l(32), r7.x
  imad r4.x, r7.z, l(1024), r4.x
  ishl r6.z, r7.w, l(31)
  imad r4.x, r4.x, l(0x00010000), r6.z
  iadd r6.x, r2.w, r4.x
  break 
  case l(4)
  mov_sat r3.xyz, r3.xyzx
  mad r7.xyz, r3.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(2048), r2.w
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r4.x, r7.y, l(32), r7.x
  ishl r6.z, r7.z, l(27)
  imad r4.x, r4.x, l(0x00010000), r6.z
  iadd r6.x, r2.w, r4.x
  break 
  case l(5)
  mov_sat r3.xyz, r3.xyzx
  mad r7.xyz, r3.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r2.w, r7.y, l(32), r7.x
  imad r2.w, r7.z, l(1024), r2.w
  mov_sat r5.xyz, r5.xyzx
  mad r7.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r7.xyz, r7.xyzx
  imad r4.x, r7.y, l(32), r7.x
  ishl r6.z, r7.z, l(26)
  imad r4.x, r4.x, l(0x00010000), r6.z
  iadd r6.x, r2.w, r4.x
  break 
  case l(10)
  mov_sat r3.xy, r3.xyxx
  mov_sat r3.zw, r5.xxxy
  mad r7.xyzw, r3.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(256), r7.x
  imad r2.w, r7.z, l(0x00010000), r2.w
  imad r6.x, r7.w, l(0x01000000), r2.w
  break 
  case l(15)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.w, r7.y, l(16), r7.x
  imad r2.w, r7.z, l(256), r2.w
  imad r2.w, r7.w, l(4096), r2.w
  mov_sat r5.xyzw, r5.xyzw
  mad r7.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r3.y, r7.y, l(16), r7.x
  imad r3.y, r7.z, l(256), r3.y
  ishl r3.z, r7.w, l(28)
  imad r3.y, r3.y, l(0x00010000), r3.z
  iadd r6.x, r2.w, r3.y
  break 
  case l(24)
  mov_sat r5.z, r3.x
  mov_sat r5.x, r5.x
  mad r3.yz, r5.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r3.yz, r3.yyzy
  imad r6.x, r3.z, l(0x00010000), r3.y
  break 
  default 
  f32tof16 r2.w, r3.x
  f32tof16 r3.x, r5.x
  imad r6.x, r3.x, l(0x00010000), r2.w
  break 
endswitch 
iadd r3.xyzw, r0.yyyy, l(4, 5, 7, 8)
ld r5.yw, r3.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r5.xz, r5.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r5.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r5.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r6.zw, r5.yyyw, l(0, 0, 16, 16)
  f16tof32 r5.xy, r5.wyww
  f16tof32 r5.zw, r6.wwwz
  break 
  default 
  mov r5.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r0.y, l(724)
  ld r7.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r6.zw, r7.yyyw, l(0, 0, 16, 16)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r6.wwwz
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r5.xyzw, r5.xyzw, r7.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r6.zw, r0.yyyy, l(0, 0, 13, 733)
    ld r7.yw, r6.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r8.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r8.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r5.ywxz, r7.ywxz
    ld r8.yw, r6.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r6.zw, r8.yyyw, l(0, 0, 16, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r6.wwwz
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r5.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r5.xyzw, r2.wwww, r5.ywxz
if_nz r0.z
  mov r5.xz, r5.zzxz
endif 
ld r7.yw, r3.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
  f16tof32 r7.xy, r7.wyww
  f16tof32 r7.zw, r3.yyyx
  break 
  default 
  mov r7.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r0.y, l(725)
  ld r8.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r8.ywyy, l(16, 16, 0, 0)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r3.yyyx
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r7.xyzw, r7.xyzw, r8.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r3.xy, r0.yyyy, l(14, 734, 0, 0)
    ld r8.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r6.zw, r8.yyyw, l(0, 0, 16, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r6.wwwz
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r7.ywxz, r8.ywxz
    ld r9.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r9.ywyy, l(16, 16, 0, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r3.yyyx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r7.xyzw, r2.wwww, r7.ywxz
if_nz r0.z
  mov r7.xz, r7.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(1024), r2.w
  imad r2.w, r8.w, l(0x00008000), r2.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r3.x, r8.y, l(32), r8.x
  imad r3.x, r8.z, l(1024), r3.x
  ishl r3.y, r8.w, l(31)
  imad r3.x, r3.x, l(0x00010000), r3.y
  iadd r6.y, r2.w, r3.x
  break 
  case l(4)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(2048), r2.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r3.x, r8.y, l(32), r8.x
  ishl r3.y, r8.z, l(27)
  imad r3.x, r3.x, l(0x00010000), r3.y
  iadd r6.y, r2.w, r3.x
  break 
  case l(5)
  mov_sat r5.xyz, r5.xyzx
  mad r8.xyz, r5.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(1024), r2.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r3.x, r8.y, l(32), r8.x
  ishl r3.y, r8.z, l(26)
  imad r3.x, r3.x, l(0x00010000), r3.y
  iadd r6.y, r2.w, r3.x
  break 
  case l(10)
  mov_sat r5.xy, r5.xyxx
  mov_sat r5.zw, r7.xxxy
  mad r8.xyzw, r5.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(256), r8.x
  imad r2.w, r8.z, l(0x00010000), r2.w
  imad r6.y, r8.w, l(0x01000000), r2.w
  break 
  case l(15)
  mov_sat r5.xyzw, r5.xyzw
  mad r8.xyzw, r5.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(16), r8.x
  imad r2.w, r8.z, l(256), r2.w
  imad r2.w, r8.w, l(4096), r2.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r3.x, r8.y, l(16), r8.x
  imad r3.x, r8.z, l(256), r3.x
  ishl r3.y, r8.w, l(28)
  imad r3.x, r3.x, l(0x00010000), r3.y
  iadd r6.y, r2.w, r3.x
  break 
  case l(24)
  mov_sat r7.z, r5.x
  mov_sat r7.x, r7.x
  mad r3.xy, r7.zxzz, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r3.xy, r3.xyxx
  imad r6.y, r3.y, l(0x00010000), r3.x
  break 
  default 
  f32tof16 r2.w, r5.x
  f32tof16 r3.x, r7.x
  imad r6.y, r3.x, l(0x00010000), r2.w
  break 
endswitch 
iadd r5.xyzw, r0.xxxx, l(5, 6, 7, 8)
if_nz r1.z
  ishl r3.xy, r6.xyxx, l(8, 8, 0, 0)
  and r3.xy, r3.xyxx, l(0xff00ff00, 0xff00ff00, 0, 0)
  ushr r6.zw, r6.xxxy, l(0, 0, 8, 8)
  and r6.zw, r6.zzzw, l(0, 0, 0x00ff00ff, 0x00ff00ff)
  iadd r6.xy, r3.xyxx, r6.zwzz
endif 
store_uav_typed U0[0].xyzw, r5.xxxx, r6.xyxx
ld r6.yw, r4.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r6.ywyy, l(16, 16, 0, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.yyyx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.w, r0.w, l(0.500000)
  iadd r3.x, r1.w, l(726)
  ld r7.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r2.w, r0.w, l(0.250000)
    iadd r3.xy, r1.wwww, l(15, 735, 0, 0)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r2.w, r0.w
endif 
mul r6.xyzw, r2.wwww, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
ld r7.yw, r3.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r7.ywyy, l(16, 16, 0, 0)
  f16tof32 r7.xy, r7.wyww
  f16tof32 r7.zw, r3.yyyx
  break 
  default 
  mov r7.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(727)
  ld r8.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.xy, r8.ywyy, l(16, 16, 0, 0)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r3.yyyx
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r7.xyzw, r7.xyzw, r8.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.w, r0.w, l(0.250000)
    iadd r3.xy, r0.yyyy, l(16, 736, 0, 0)
    ld r8.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r8.yywy, l(16, 0, 16, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.zzzx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r7.ywxz, r8.ywxz
    ld r9.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xy, r9.ywyy, l(16, 16, 0, 0)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r3.yyyx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r7.xyzw, r1.wwww, r7.ywxz
if_nz r0.z
  mov r7.xz, r7.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(32), r8.x
  imad r1.w, r8.z, l(1024), r1.w
  imad r1.w, r8.w, l(0x00008000), r1.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(32), r8.x
  imad r2.w, r8.z, l(1024), r2.w
  ishl r3.z, r8.w, l(31)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(4)
  mov_sat r6.xyz, r6.xyzx
  mad r8.xyz, r6.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r1.w, r8.y, l(32), r8.x
  imad r1.w, r8.z, l(2048), r1.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  ishl r3.z, r8.z, l(27)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(5)
  mov_sat r6.xyz, r6.xyzx
  mad r8.xyz, r6.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r1.w, r8.y, l(32), r8.x
  imad r1.w, r8.z, l(1024), r1.w
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.w, r8.y, l(32), r8.x
  ishl r3.z, r8.z, l(26)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(10)
  mov_sat r6.xy, r6.xyxx
  mov_sat r6.zw, r7.xxxy
  mad r8.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(256), r8.x
  imad r1.w, r8.z, l(0x00010000), r1.w
  imad r3.x, r8.w, l(0x01000000), r1.w
  break 
  case l(15)
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r1.w, r8.y, l(16), r8.x
  imad r1.w, r8.z, l(256), r1.w
  imad r1.w, r8.w, l(4096), r1.w
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.w, r8.y, l(16), r8.x
  imad r2.w, r8.z, l(256), r2.w
  ishl r3.z, r8.w, l(28)
  imad r2.w, r2.w, l(0x00010000), r3.z
  iadd r3.x, r1.w, r2.w
  break 
  case l(24)
  mov_sat r7.z, r6.x
  mov_sat r7.x, r7.x
  mad r4.xy, r7.zxzz, l(65535.000000, 65535.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  ftou r4.xy, r4.xyxx
  imad r3.x, r4.y, l(0x00010000), r4.x
  break 
  default 
  f32tof16 r1.w, r6.x
  f32tof16 r2.w, r7.x
  imad r3.x, r2.w, l(0x00010000), r1.w
  break 
endswitch 
ld r6.yw, r3.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.zw, r6.yyyw, l(0, 0, 16, 16)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r3.wwwz
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r2.w, r0.y, l(728)
  ld r7.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.zw, r7.yyyw, l(0, 0, 16, 16)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r3.wwwz
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r1.w, r0.w, l(0.250000)
    iadd r3.zw, r0.yyyy, l(0, 0, 17, 737)
    ld r7.yw, r3.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r3.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.zw, r8.yyyw, l(0, 0, 16, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwz
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r1.w, r0.w
endif 
mul r6.xyzw, r1.wwww, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
iadd r0.y, r2.x, r0.y
imad r1.w, r2.z, l(3), r0.y
iadd r2.x, r2.y, r1.w
ld r7.yw, r2.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.zw, r7.yyyw, l(0, 0, 16, 16)
  f16tof32 r7.xy, r7.wyww
  f16tof32 r7.zw, r2.wwwz
  break 
  default 
  mov r7.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.z, r0.w, l(0.500000)
  iadd r2.w, r2.x, l(720)
  ld r8.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r3.zw, r8.yyyw, l(0, 0, 16, 16)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r3.wwwz
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r7.xyzw, r7.xyzw, r8.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r2.z, r0.w, l(0.250000)
    iadd r2.xw, r2.xxxx, l(9, 0, 0, 729)
    ld r8.yw, r2.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.zw, r8.yyyw, l(0, 0, 16, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r3.wwwz
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r7.ywxz, r8.ywxz
    ld r9.yw, r2.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.xw, r9.yyyw, l(16, 0, 0, 16)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r2.wwwx
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r2.z, r0.w
endif 
mul r7.xyzw, r2.zzzz, r7.ywxz
if_nz r0.z
  mov r7.xz, r7.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.x, r8.y, l(32), r8.x
  imad r2.x, r8.z, l(1024), r2.x
  imad r2.x, r8.w, l(0x00008000), r2.x
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.z, r8.y, l(32), r8.x
  imad r2.z, r8.z, l(1024), r2.z
  ishl r2.w, r8.w, l(31)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r3.y, r2.z, r2.x
  break 
  case l(4)
  mov_sat r6.xyz, r6.xyzx
  mad r2.xzw, r6.xxyz, l(31.000000, 0.000000, 63.000000, 31.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r2.x, r2.z, l(32), r2.x
  imad r2.x, r2.w, l(2048), r2.x
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.z, r8.y, l(32), r8.x
  ishl r2.w, r8.z, l(27)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r3.y, r2.z, r2.x
  break 
  case l(5)
  mov_sat r6.xyz, r6.xyzx
  mad r2.xzw, r6.xxyz, l(31.000000, 0.000000, 31.000000, 63.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r2.x, r2.z, l(32), r2.x
  imad r2.x, r2.w, l(1024), r2.x
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.z, r8.y, l(32), r8.x
  ishl r2.w, r8.z, l(26)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r3.y, r2.z, r2.x
  break 
  case l(10)
  mov_sat r6.xy, r6.xyxx
  mov_sat r6.zw, r7.xxxy
  mad r8.xyzw, r6.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.x, r8.y, l(256), r8.x
  imad r2.x, r8.z, l(0x00010000), r2.x
  imad r3.y, r8.w, l(0x01000000), r2.x
  break 
  case l(15)
  mov_sat r6.xyzw, r6.xyzw
  mad r8.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.x, r8.y, l(16), r8.x
  imad r2.x, r8.z, l(256), r2.x
  imad r2.x, r8.w, l(4096), r2.x
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.z, r8.y, l(16), r8.x
  imad r2.z, r8.z, l(256), r2.z
  ishl r2.w, r8.w, l(28)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r3.y, r2.z, r2.x
  break 
  case l(24)
  mov_sat r7.z, r6.x
  mov_sat r7.x, r7.x
  mad r2.xz, r7.zzxz, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r2.xz, r2.xxzx
  imad r3.y, r2.z, l(0x00010000), r2.x
  break 
  default 
  f32tof16 r2.x, r6.x
  f32tof16 r2.z, r7.x
  imad r3.y, r2.z, l(0x00010000), r2.x
  break 
endswitch 
if_nz r1.z
  ishl r2.xz, r3.xxyx, l(8, 0, 8, 0)
  and r2.xz, r2.xxzx, l(0xff00ff00, 0, 0xff00ff00, 0)
  ushr r3.zw, r3.xxxy, l(0, 0, 8, 8)
  and r3.zw, r3.zzzw, l(0, 0, 0x00ff00ff, 0x00ff00ff)
  iadd r3.xy, r2.xzxx, r3.zwzz
endif 
store_uav_typed U0[0].xyzw, r5.yyyy, r3.xyxx
iadd r2.xz, r1.wwww, l(1, 0, 2, 0)
ld r3.yw, r2.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r3.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r3.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xw, r3.yyyw, l(16, 0, 0, 16)
  f16tof32 r3.xy, r3.wyww
  f16tof32 r3.zw, r2.wwwx
  break 
  default 
  mov r3.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.x, r0.w, l(0.500000)
  iadd r2.w, r1.w, l(721)
  ld r6.yw, r2.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r4.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r4.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r3.xyzw, r3.xyzw, r6.xyzw
  uge r2.w, r1.y, l(6)
  if_nz r2.w
    mul r2.x, r0.w, l(0.250000)
    iadd r4.xy, r1.wwww, l(10, 730, 0, 0)
    ld r6.yw, r4.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r5.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r3.ywxz, r6.ywxz
    ld r7.yw, r4.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r3.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r2.x, r0.w
endif 
mul r3.xyzw, r2.xxxx, r3.ywxz
if_nz r0.z
  mov r3.xz, r3.zzxz
endif 
ld r6.yw, r2.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xz, r6.yywy, l(16, 0, 16, 0)
  f16tof32 r6.xy, r6.wyww
  f16tof32 r6.zw, r2.zzzx
  break 
  default 
  mov r6.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.x, r0.w, l(0.500000)
  iadd r2.z, r1.w, l(722)
  ld r7.yw, r2.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.zw, r7.yyyw, l(0, 0, 16, 16)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r2.wwwz
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r6.xyzw, r6.xyzw, r7.xyzw
  uge r2.z, r1.y, l(6)
  if_nz r2.z
    mul r2.x, r0.w, l(0.250000)
    iadd r2.zw, r1.wwww, l(0, 0, 11, 731)
    ld r7.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r6.ywxz, r7.ywxz
    ld r8.yw, r2.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.zw, r8.yyyw, l(0, 0, 16, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r2.wwwz
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r2.x, r0.w
endif 
mul r6.xyzw, r2.xxxx, r6.ywxz
if_nz r0.z
  mov r6.xz, r6.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(1024), r1.w
  imad r1.w, r7.w, l(0x00008000), r1.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.x, r7.y, l(32), r7.x
  imad r2.x, r7.z, l(1024), r2.x
  ishl r2.z, r7.w, l(31)
  imad r2.x, r2.x, l(0x00010000), r2.z
  iadd r4.x, r1.w, r2.x
  break 
  case l(4)
  mov_sat r3.xyz, r3.xyzx
  mad r2.xzw, r3.xxyz, l(31.000000, 0.000000, 63.000000, 31.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r1.w, r2.z, l(32), r2.x
  imad r1.w, r2.w, l(2048), r1.w
  mov_sat r6.xyz, r6.xyzx
  mad r2.xzw, r6.xxyz, l(31.000000, 0.000000, 63.000000, 31.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r2.x, r2.z, l(32), r2.x
  ishl r2.z, r2.w, l(27)
  imad r2.x, r2.x, l(0x00010000), r2.z
  iadd r4.x, r1.w, r2.x
  break 
  case l(5)
  mov_sat r3.xyz, r3.xyzx
  mad r2.xzw, r3.xxyz, l(31.000000, 0.000000, 31.000000, 63.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r1.w, r2.z, l(32), r2.x
  imad r1.w, r2.w, l(1024), r1.w
  mov_sat r6.xyz, r6.xyzx
  mad r2.xzw, r6.xxyz, l(31.000000, 0.000000, 31.000000, 63.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r2.x, r2.z, l(32), r2.x
  ishl r2.z, r2.w, l(26)
  imad r2.x, r2.x, l(0x00010000), r2.z
  iadd r4.x, r1.w, r2.x
  break 
  case l(10)
  mov_sat r3.xy, r3.xyxx
  mov_sat r3.zw, r6.xxxy
  mad r7.xyzw, r3.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(256), r7.x
  imad r1.w, r7.z, l(0x00010000), r1.w
  imad r4.x, r7.w, l(0x01000000), r1.w
  break 
  case l(15)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(16), r7.x
  imad r1.w, r7.z, l(256), r1.w
  imad r1.w, r7.w, l(4096), r1.w
  mov_sat r6.xyzw, r6.xyzw
  mad r7.xyzw, r6.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.x, r7.y, l(16), r7.x
  imad r2.x, r7.z, l(256), r2.x
  ishl r2.z, r7.w, l(28)
  imad r2.x, r2.x, l(0x00010000), r2.z
  iadd r4.x, r1.w, r2.x
  break 
  case l(24)
  mov_sat r6.z, r3.x
  mov_sat r6.x, r6.x
  mad r2.xz, r6.zzxz, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r2.xz, r2.xxzx
  imad r4.x, r2.z, l(0x00010000), r2.x
  break 
  default 
  f32tof16 r1.w, r3.x
  f32tof16 r2.x, r6.x
  imad r4.x, r2.x, l(0x00010000), r1.w
  break 
endswitch 
iadd r1.w, r2.y, r0.y
iadd r2.xy, r1.wwww, l(3, 6, 0, 0)
ld r3.yw, r2.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r3.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r3.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xz, r3.yywy, l(16, 0, 16, 0)
  f16tof32 r3.xy, r3.wyww
  f16tof32 r3.zw, r2.zzzx
  break 
  default 
  mov r3.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.x, r0.w, l(0.500000)
  iadd r2.z, r1.w, l(723)
  ld r6.yw, r2.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.zw, r6.yyyw, l(0, 0, 16, 16)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r2.wwwz
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r3.xyzw, r3.xyzw, r6.xyzw
  uge r2.z, r1.y, l(6)
  if_nz r2.z
    mul r2.x, r0.w, l(0.250000)
    iadd r2.zw, r1.wwww, l(0, 0, 12, 732)
    ld r6.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r5.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r3.ywxz, r6.ywxz
    ld r7.yw, r2.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.zw, r7.yyyw, l(0, 0, 16, 16)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r2.wwwz
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r3.xyzw, r6.zxwy, r7.xyzw
  endif 
else 
  mov r2.x, r0.w
endif 
mul r3.xyzw, r2.xxxx, r3.ywxz
if_nz r0.z
  mov r3.xz, r3.zzxz
endif 
iadd r6.xyzw, r0.yyyy, l(4, 5, 7, 8)
ld r7.yw, r6.xxxx, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
  ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
  itof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xz, r7.yywy, l(16, 0, 16, 0)
  f16tof32 r7.xy, r7.wyww
  f16tof32 r7.zw, r2.zzzx
  break 
  default 
  mov r7.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.x, r0.w, l(0.500000)
  iadd r2.z, r0.y, l(724)
  ld r8.yw, r2.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
    ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
    itof r9.xyzw, r9.xyzw
    mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.zw, r8.yyyw, l(0, 0, 16, 16)
    f16tof32 r8.xy, r8.wyww
    f16tof32 r8.zw, r2.wwwz
    break 
    default 
    mov r8.xz, l(0,0,0,0)
    break 
  endswitch 
  add r7.xyzw, r7.xyzw, r8.xyzw
  uge r2.z, r1.y, l(6)
  if_nz r2.z
    mul r2.x, r0.w, l(0.250000)
    iadd r2.zw, r0.yyyy, l(0, 0, 13, 733)
    ld r8.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r5.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r8.xyzw, r7.ywxz, r8.ywxz
    ld r9.yw, r2.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r9.xz, r9.yywy, l(16, 0, 16, 0)
      ishr r10.xyzw, r9.xyzw, l(16, 16, 16, 16)
      itof r10.xyzw, r10.xyzw
      mul r10.xyzw, r10.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r9.xyzw, r10.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.zw, r9.yyyw, l(0, 0, 16, 16)
      f16tof32 r9.xy, r9.wyww
      f16tof32 r9.zw, r2.wwwz
      break 
      default 
      mov r9.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r8.zxwy, r9.xyzw
  endif 
else 
  mov r2.x, r0.w
endif 
mul r7.xyzw, r2.xxxx, r7.ywxz
if_nz r0.z
  mov r7.xz, r7.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r3.xyzw, r3.xyzw
  mad r8.xyzw, r3.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.x, r8.y, l(32), r8.x
  imad r2.x, r8.z, l(1024), r2.x
  imad r2.x, r8.w, l(0x00008000), r2.x
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.z, r8.y, l(32), r8.x
  imad r2.z, r8.z, l(1024), r2.z
  ishl r2.w, r8.w, l(31)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r4.y, r2.z, r2.x
  break 
  case l(4)
  mov_sat r3.xyz, r3.xyzx
  mad r2.xzw, r3.xxyz, l(31.000000, 0.000000, 63.000000, 31.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r2.x, r2.z, l(32), r2.x
  imad r2.x, r2.w, l(2048), r2.x
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.z, r8.y, l(32), r8.x
  ishl r2.w, r8.z, l(27)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r4.y, r2.z, r2.x
  break 
  case l(5)
  mov_sat r3.xyz, r3.xyzx
  mad r2.xzw, r3.xxyz, l(31.000000, 0.000000, 31.000000, 63.000000), l(0.500000, 0.000000, 0.500000, 0.500000)
  ftou r2.xzw, r2.xxzw
  imad r2.x, r2.z, l(32), r2.x
  imad r2.x, r2.w, l(1024), r2.x
  mov_sat r7.xyz, r7.xyzx
  mad r8.xyz, r7.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r8.xyz, r8.xyzx
  imad r2.z, r8.y, l(32), r8.x
  ishl r2.w, r8.z, l(26)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r4.y, r2.z, r2.x
  break 
  case l(10)
  mov_sat r3.xy, r3.xyxx
  mov_sat r3.zw, r7.xxxy
  mad r8.xyzw, r3.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.x, r8.y, l(256), r8.x
  imad r2.x, r8.z, l(0x00010000), r2.x
  imad r4.y, r8.w, l(0x01000000), r2.x
  break 
  case l(15)
  mov_sat r3.xyzw, r3.xyzw
  mad r8.xyzw, r3.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.x, r8.y, l(16), r8.x
  imad r2.x, r8.z, l(256), r2.x
  imad r2.x, r8.w, l(4096), r2.x
  mov_sat r7.xyzw, r7.xyzw
  mad r8.xyzw, r7.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r8.xyzw, r8.xyzw
  imad r2.z, r8.y, l(16), r8.x
  imad r2.z, r8.z, l(256), r2.z
  ishl r2.w, r8.w, l(28)
  imad r2.z, r2.z, l(0x00010000), r2.w
  iadd r4.y, r2.z, r2.x
  break 
  case l(24)
  mov_sat r7.z, r3.x
  mov_sat r7.x, r7.x
  mad r2.xz, r7.zzxz, l(65535.000000, 0.000000, 65535.000000, 0.000000), l(0.500000, 0.000000, 0.500000, 0.000000)
  ftou r2.xz, r2.xxzx
  imad r4.y, r2.z, l(0x00010000), r2.x
  break 
  default 
  f32tof16 r2.x, r3.x
  f32tof16 r2.z, r7.x
  imad r4.y, r2.z, l(0x00010000), r2.x
  break 
endswitch 
if_nz r1.z
  ishl r2.xz, r4.xxyx, l(8, 0, 8, 0)
  and r2.xz, r2.xxzx, l(0xff00ff00, 0, 0xff00ff00, 0)
  ushr r3.xy, r4.xyxx, l(8, 8, 0, 0)
  and r3.xy, r3.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r4.xy, r2.xzxx, r3.xyxx
endif 
store_uav_typed U0[0].xyzw, r5.zzzz, r4.xyxx
ld r3.yw, r6.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r3.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r3.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r2.xz, r3.yywy, l(16, 0, 16, 0)
  f16tof32 r3.xy, r3.wyww
  f16tof32 r3.zw, r2.zzzx
  break 
  default 
  mov r3.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r2.x, r0.w, l(0.500000)
  iadd r2.z, r0.y, l(725)
  ld r7.yw, r2.zzzz, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r2.zw, r7.yyyw, l(0, 0, 16, 16)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r2.wwwz
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r3.xyzw, r3.xyzw, r7.xyzw
  uge r2.z, r1.y, l(6)
  if_nz r2.z
    mul r2.x, r0.w, l(0.250000)
    iadd r2.zw, r0.yyyy, l(0, 0, 14, 734)
    ld r7.yw, r2.zzzz, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r4.xy, r7.ywyy, l(16, 16, 0, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r4.yyyx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r3.ywxz, r7.ywxz
    ld r8.yw, r2.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r2.zw, r8.yyyw, l(0, 0, 16, 16)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r2.wwwz
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r3.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r2.x, r0.w
endif 
mul r3.xyzw, r2.xxxx, r3.ywxz
if_nz r0.z
  mov r3.xz, r3.zzxz
endif 
ld r2.yw, r2.yyyy, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r2.xz, r2.yywy, l(16, 0, 16, 0)
  ishr r7.xyzw, r2.xyzw, l(16, 16, 16, 16)
  itof r7.xyzw, r7.xyzw
  mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r2.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r4.xy, r2.ywyy, l(16, 16, 0, 0)
  f16tof32 r2.xy, r2.wyww
  f16tof32 r2.zw, r4.yyyx
  break 
  default 
  mov r2.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r4.x, r0.w, l(0.500000)
  iadd r4.y, r1.w, l(726)
  ld r7.yw, r4.yyyy, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
    ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
    itof r8.xyzw, r8.xyzw
    mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r5.xy, r7.ywyy, l(16, 16, 0, 0)
    f16tof32 r7.xy, r7.wyww
    f16tof32 r7.zw, r5.yyyx
    break 
    default 
    mov r7.xz, l(0,0,0,0)
    break 
  endswitch 
  add r2.xyzw, r2.xyzw, r7.xyzw
  uge r4.y, r1.y, l(6)
  if_nz r4.y
    mul r4.x, r0.w, l(0.250000)
    iadd r5.xy, r1.wwww, l(15, 735, 0, 0)
    ld r7.yw, r5.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xz, r7.yywy, l(16, 0, 16, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r5.zzzx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r2.ywxz, r7.ywxz
    ld r8.yw, r5.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r8.xz, r8.yywy, l(16, 0, 16, 0)
      ishr r9.xyzw, r8.xyzw, l(16, 16, 16, 16)
      itof r9.xyzw, r9.xyzw
      mul r9.xyzw, r9.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r8.xyzw, r9.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r8.ywyy, l(16, 16, 0, 0)
      f16tof32 r8.xy, r8.wyww
      f16tof32 r8.zw, r5.yyyx
      break 
      default 
      mov r8.xz, l(0,0,0,0)
      break 
    endswitch 
    add r2.xyzw, r7.zxwy, r8.xyzw
  endif 
else 
  mov r4.x, r0.w
endif 
mul r2.xyzw, r2.ywxz, r4.xxxx
if_nz r0.z
  mov r2.xz, r2.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(32), r7.x
  imad r1.w, r7.z, l(1024), r1.w
  imad r1.w, r7.w, l(0x00008000), r1.w
  mov_sat r2.xyzw, r2.xyzw
  mad r7.xyzw, r2.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r5.x, r7.y, l(32), r7.x
  imad r5.x, r7.z, l(1024), r5.x
  ishl r5.y, r7.w, l(31)
  imad r5.x, r5.x, l(0x00010000), r5.y
  iadd r4.x, r1.w, r5.x
  break 
  case l(4)
  mov_sat r3.xyz, r3.xyzx
  mad r5.xyz, r3.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r1.w, r5.y, l(32), r5.x
  imad r1.w, r5.z, l(2048), r1.w
  mov_sat r2.xyz, r2.xyzx
  mad r5.xyz, r2.xyzx, l(31.000000, 63.000000, 31.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r5.x, r5.y, l(32), r5.x
  ishl r5.y, r5.z, l(27)
  imad r5.x, r5.x, l(0x00010000), r5.y
  iadd r4.x, r1.w, r5.x
  break 
  case l(5)
  mov_sat r3.xyz, r3.xyzx
  mad r5.xyz, r3.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r1.w, r5.y, l(32), r5.x
  imad r1.w, r5.z, l(1024), r1.w
  mov_sat r2.xyz, r2.xyzx
  mad r5.xyz, r2.xyzx, l(31.000000, 31.000000, 63.000000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  ftou r5.xyz, r5.xyzx
  imad r5.x, r5.y, l(32), r5.x
  ishl r5.y, r5.z, l(26)
  imad r5.x, r5.x, l(0x00010000), r5.y
  iadd r4.x, r1.w, r5.x
  break 
  case l(10)
  mov_sat r3.xy, r3.xyxx
  mov_sat r3.zw, r2.xxxy
  mad r7.xyzw, r3.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(256), r7.x
  imad r1.w, r7.z, l(0x00010000), r1.w
  imad r4.x, r7.w, l(0x01000000), r1.w
  break 
  case l(15)
  mov_sat r3.xyzw, r3.xyzw
  mad r7.xyzw, r3.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r1.w, r7.y, l(16), r7.x
  imad r1.w, r7.z, l(256), r1.w
  imad r1.w, r7.w, l(4096), r1.w
  mov_sat r2.xyzw, r2.xyzw
  mad r7.xyzw, r2.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r7.xyzw, r7.xyzw
  imad r2.y, r7.y, l(16), r7.x
  imad r2.y, r7.z, l(256), r2.y
  ishl r2.w, r7.w, l(28)
  imad r2.y, r2.y, l(0x00010000), r2.w
  iadd r4.x, r1.w, r2.y
  break 
  case l(24)
  mov_sat r2.z, r3.x
  mov_sat r2.x, r2.x
  mad r2.yz, r2.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r2.yz, r2.yyzy
  imad r4.x, r2.z, l(0x00010000), r2.y
  break 
  default 
  f32tof16 r1.w, r3.x
  f32tof16 r2.x, r2.x
  imad r4.x, r2.x, l(0x00010000), r1.w
  break 
endswitch 
ld r2.yw, r6.zzzz, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r2.xz, r2.yywy, l(16, 0, 16, 0)
  ishr r3.xyzw, r2.xyzw, l(16, 16, 16, 16)
  itof r3.xyzw, r3.xyzw
  mul r3.xyzw, r3.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r2.xyzw, r3.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r3.xy, r2.ywyy, l(16, 16, 0, 0)
  f16tof32 r2.xy, r2.wyww
  f16tof32 r2.zw, r3.yyyx
  break 
  default 
  mov r2.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.w, r0.w, l(0.500000)
  iadd r3.x, r0.y, l(727)
  ld r3.yw, r3.xxxx, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r3.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r3.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r5.xy, r3.ywyy, l(16, 16, 0, 0)
    f16tof32 r3.xy, r3.wyww
    f16tof32 r3.zw, r5.yyyx
    break 
    default 
    mov r3.xz, l(0,0,0,0)
    break 
  endswitch 
  add r2.xyzw, r2.xyzw, r3.xyzw
  uge r3.x, r1.y, l(6)
  if_nz r3.x
    mul r1.w, r0.w, l(0.250000)
    iadd r3.xy, r0.yyyy, l(16, 736, 0, 0)
    ld r7.yw, r3.xxxx, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r3.xz, r7.yywy, l(16, 0, 16, 0)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r3.zzzx
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r7.xyzw, r2.ywxz, r7.ywxz
    ld r3.yw, r3.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r3.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r3.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r3.ywyy, l(16, 16, 0, 0)
      f16tof32 r3.xy, r3.wyww
      f16tof32 r3.zw, r5.yyyx
      break 
      default 
      mov r3.xz, l(0,0,0,0)
      break 
    endswitch 
    add r2.xyzw, r3.xyzw, r7.zxwy
  endif 
else 
  mov r1.w, r0.w
endif 
mul r2.xyzw, r1.wwww, r2.ywxz
if_nz r0.z
  mov r2.xz, r2.zzxz
endif 
ld r3.yw, r6.wwww, T0[0].zxwy
switch r4.w
  case l(5)
  ishl r3.xz, r3.yywy, l(16, 0, 16, 0)
  ishr r6.xyzw, r3.xyzw, l(16, 16, 16, 16)
  itof r6.xyzw, r6.xyzw
  mul r6.xyzw, r6.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
  max r3.xyzw, r6.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
  break 
  case l(7)
  ushr r5.xy, r3.ywyy, l(16, 16, 0, 0)
  f16tof32 r3.xy, r3.wyww
  f16tof32 r3.zw, r5.yyyx
  break 
  default 
  mov r3.xz, l(0,0,0,0)
  break 
endswitch 
if_nz r1.x
  mul r1.x, r0.w, l(0.500000)
  iadd r1.w, r0.y, l(728)
  ld r6.yw, r1.wwww, T0[0].zxwy
  switch r4.w
    case l(5)
    ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
    ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
    itof r7.xyzw, r7.xyzw
    mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
    max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
    break 
    case l(7)
    ushr r5.xy, r6.ywyy, l(16, 16, 0, 0)
    f16tof32 r6.xy, r6.wyww
    f16tof32 r6.zw, r5.yyyx
    break 
    default 
    mov r6.xz, l(0,0,0,0)
    break 
  endswitch 
  add r3.xyzw, r3.xyzw, r6.xyzw
  uge r1.y, r1.y, l(6)
  if_nz r1.y
    mul r0.w, r0.w, l(0.250000)
    iadd r1.yw, r0.yyyy, l(0, 17, 0, 737)
    ld r6.yw, r1.yyyy, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r6.xz, r6.yywy, l(16, 0, 16, 0)
      ishr r7.xyzw, r6.xyzw, l(16, 16, 16, 16)
      itof r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r6.xyzw, r7.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r5.xy, r6.ywyy, l(16, 16, 0, 0)
      f16tof32 r6.xy, r6.wyww
      f16tof32 r6.zw, r5.yyyx
      break 
      default 
      mov r6.xz, l(0,0,0,0)
      break 
    endswitch 
    add r6.xyzw, r3.ywxz, r6.ywxz
    ld r7.yw, r1.wwww, T0[0].zxwy
    switch r4.w
      case l(5)
      ishl r7.xz, r7.yywy, l(16, 0, 16, 0)
      ishr r8.xyzw, r7.xyzw, l(16, 16, 16, 16)
      itof r8.xyzw, r8.xyzw
      mul r8.xyzw, r8.xyzw, l(0.000977, 0.000977, 0.000977, 0.000977)
      max r7.xyzw, r8.zxwy, l(-1.000000, -1.000000, -1.000000, -1.000000)
      break 
      case l(7)
      ushr r1.yw, r7.yyyw, l(0, 16, 0, 16)
      f16tof32 r7.xy, r7.wyww
      f16tof32 r7.zw, r1.wwwy
      break 
      default 
      mov r7.xz, l(0,0,0,0)
      break 
    endswitch 
    add r3.xyzw, r6.zxwy, r7.xyzw
  else 
    mov r0.w, r1.x
  endif 
endif 
mul r3.xyzw, r0.wwww, r3.ywxz
if_nz r0.z
  mov r3.xz, r3.zzxz
endif 
switch r4.z
  case l(3)
  mov_sat r2.xyzw, r2.xyzw
  mad r6.xyzw, r2.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r6.xyzw, r6.xyzw
  imad r0.y, r6.y, l(32), r6.x
  imad r0.y, r6.z, l(1024), r0.y
  imad r0.y, r6.w, l(0x00008000), r0.y
  mov_sat r3.xyzw, r3.xyzw
  mad r6.xyzw, r3.xyzw, l(31.000000, 31.000000, 31.000000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r6.xyzw, r6.xyzw
  imad r0.z, r6.y, l(32), r6.x
  imad r0.z, r6.z, l(1024), r0.z
  ishl r0.w, r6.w, l(31)
  imad r0.z, r0.z, l(0x00010000), r0.w
  iadd r4.y, r0.z, r0.y
  break 
  case l(4)
  mov_sat r2.xyz, r2.xyzx
  mad r0.yzw, r2.xxyz, l(0.000000, 31.000000, 63.000000, 31.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r0.yzw, r0.yyzw
  imad r0.y, r0.z, l(32), r0.y
  imad r0.y, r0.w, l(2048), r0.y
  mov_sat r3.xyz, r3.xyzx
  mad r1.xyw, r3.xyxz, l(31.000000, 63.000000, 0.000000, 31.000000), l(0.500000, 0.500000, 0.000000, 0.500000)
  ftou r1.xyw, r1.xyxw
  imad r0.z, r1.y, l(32), r1.x
  ishl r0.w, r1.w, l(27)
  imad r0.z, r0.z, l(0x00010000), r0.w
  iadd r4.y, r0.z, r0.y
  break 
  case l(5)
  mov_sat r2.xyz, r2.xyzx
  mad r0.yzw, r2.xxyz, l(0.000000, 31.000000, 31.000000, 63.000000), l(0.000000, 0.500000, 0.500000, 0.500000)
  ftou r0.yzw, r0.yyzw
  imad r0.y, r0.z, l(32), r0.y
  imad r0.y, r0.w, l(1024), r0.y
  mov_sat r3.xyz, r3.xyzx
  mad r1.xyw, r3.xyxz, l(31.000000, 31.000000, 0.000000, 63.000000), l(0.500000, 0.500000, 0.000000, 0.500000)
  ftou r1.xyw, r1.xyxw
  imad r0.z, r1.y, l(32), r1.x
  ishl r0.w, r1.w, l(26)
  imad r0.z, r0.z, l(0x00010000), r0.w
  iadd r4.y, r0.z, r0.y
  break 
  case l(10)
  mov_sat r2.xy, r2.xyxx
  mov_sat r2.zw, r3.xxxy
  mad r6.xyzw, r2.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r6.xyzw, r6.xyzw
  imad r0.y, r6.y, l(256), r6.x
  imad r0.y, r6.z, l(0x00010000), r0.y
  imad r4.y, r6.w, l(0x01000000), r0.y
  break 
  case l(15)
  mov_sat r2.xyzw, r2.xyzw
  mad r6.xyzw, r2.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r6.xyzw, r6.xyzw
  imad r0.y, r6.y, l(16), r6.x
  imad r0.y, r6.z, l(256), r0.y
  imad r0.y, r6.w, l(4096), r0.y
  mov_sat r3.xyzw, r3.xyzw
  mad r6.xyzw, r3.xyzw, l(15.000000, 15.000000, 15.000000, 15.000000), l(0.500000, 0.500000, 0.500000, 0.500000)
  ftou r6.xyzw, r6.xyzw
  imad r0.z, r6.y, l(16), r6.x
  imad r0.z, r6.z, l(256), r0.z
  ishl r0.w, r6.w, l(28)
  imad r0.z, r0.z, l(0x00010000), r0.w
  iadd r4.y, r0.z, r0.y
  break 
  case l(24)
  mov_sat r3.z, r2.x
  mov_sat r3.x, r3.x
  mad r0.yz, r3.zzxz, l(0.000000, 65535.000000, 65535.000000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  ftou r0.yz, r0.yyzy
  imad r4.y, r0.z, l(0x00010000), r0.y
  break 
  default 
  f32tof16 r0.y, r2.x
  f32tof16 r0.z, r3.x
  imad r4.y, r0.z, l(0x00010000), r0.y
  break 
endswitch 
if_nz r1.z
  ishl r0.yz, r4.xxyx, l(0, 8, 8, 0)
  and r0.yz, r0.yyzy, l(0, 0xff00ff00, 0xff00ff00, 0)
  ushr r1.xy, r4.xyxx, l(8, 8, 0, 0)
  and r1.xy, r1.xyxx, l(0x00ff00ff, 0x00ff00ff, 0, 0)
  iadd r4.xy, r0.yzyy, r1.xyxx
endif 
store_uav_typed U0[0].xyzw, r5.wwww, r4.xyxx
ret 
// Approximately 4948 instruction slots used
